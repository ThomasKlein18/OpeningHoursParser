/* Generated By:JavaCC: Do not edit this line. OpeningHoursParserTokenManager.java */
package ch.poole.openinghoursparser;
import java.util.ArrayList;
import java.util.Collections;
import java.io.ByteArrayInputStream;

/** Token Manager. */
public class OpeningHoursParserTokenManager implements OpeningHoursParserConstants
{

  /** Debug output. */
  public  java.io.PrintStream debugStream = System.out;
  /** Set debug output. */
  public  void setDebugStream(java.io.PrintStream ds) { debugStream = ds; }
private final int jjStopStringLiteralDfa_0(int pos, long active0)
{
   switch (pos)
   {
      case 0:
         if ((active0 & 0x80000L) != 0L)
         {
            jjmatchedKind = 14;
            return 33;
         }
         if ((active0 & 0x80L) != 0L)
            return 1;
         if ((active0 & 0x100000000L) != 0L)
            return 52;
         if ((active0 & 0x200000000L) != 0L)
            return 42;
         if ((active0 & 0x80000000L) != 0L)
            return 79;
         return -1;
      case 1:
         if ((active0 & 0x200000000L) != 0L)
         {
            jjmatchedKind = 20;
            jjmatchedPos = 1;
            return 43;
         }
         if ((active0 & 0x80000L) != 0L)
         {
            jjmatchedKind = 14;
            jjmatchedPos = 1;
            return 33;
         }
         if ((active0 & 0x80000000L) != 0L)
            return 81;
         return -1;
      case 2:
         if ((active0 & 0x80000L) != 0L)
         {
            if (jjmatchedPos < 1)
            {
               jjmatchedKind = 14;
               jjmatchedPos = 1;
            }
            return -1;
         }
         if ((active0 & 0x200000000L) != 0L)
         {
            if (jjmatchedPos < 1)
            {
               jjmatchedKind = 20;
               jjmatchedPos = 1;
            }
            return -1;
         }
         return -1;
      case 3:
         if ((active0 & 0x80000L) != 0L)
         {
            if (jjmatchedPos < 1)
            {
               jjmatchedKind = 14;
               jjmatchedPos = 1;
            }
            return -1;
         }
         if ((active0 & 0x200000000L) != 0L)
         {
            if (jjmatchedPos < 1)
            {
               jjmatchedKind = 20;
               jjmatchedPos = 1;
            }
            return -1;
         }
         return -1;
      default :
         return -1;
   }
}
private final int jjStartNfa_0(int pos, long active0)
{
   return jjMoveNfa_0(jjStopStringLiteralDfa_0(pos, active0), pos + 1);
}
private int jjStopAtPos(int pos, int kind)
{
   jjmatchedKind = kind;
   jjmatchedPos = pos;
   return pos + 1;
}
private int jjMoveStringLiteralDfa0_0()
{
   switch(curChar)
   {
      case 9:
         return jjStopAtPos(0, 4);
      case 32:
         return jjStopAtPos(0, 3);
      case 34:
         return jjStopAtPos(0, 11);
      case 40:
         return jjStopAtPos(0, 27);
      case 41:
         return jjStopAtPos(0, 28);
      case 43:
         return jjStopAtPos(0, 8);
      case 44:
         return jjStopAtPos(0, 5);
      case 45:
         return jjStopAtPos(0, 9);
      case 47:
         return jjStopAtPos(0, 10);
      case 50:
         return jjMoveStringLiteralDfa1_0(0x80000L);
      case 58:
         return jjStartNfaWithStates_0(0, 7, 1);
      case 59:
         return jjStopAtPos(0, 6);
      case 91:
         return jjStopAtPos(0, 29);
      case 93:
         return jjStopAtPos(0, 30);
      case 68:
      case 100:
         return jjMoveStringLiteralDfa1_0(0x80000000L);
      case 69:
      case 101:
         return jjMoveStringLiteralDfa1_0(0x2000000L);
      case 83:
      case 115:
         return jjStartNfaWithStates_0(0, 32, 52);
      case 87:
      case 119:
         return jjMoveStringLiteralDfa1_0(0x200000000L);
      case 124:
         return jjMoveStringLiteralDfa1_0(0x40000L);
      default :
         return jjMoveNfa_0(0, 0);
   }
}
private int jjMoveStringLiteralDfa1_0(long active0)
{
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(0, active0);
      return 1;
   }
   switch(curChar)
   {
      case 52:
         return jjMoveStringLiteralDfa2_0(active0, 0x80000L);
      case 65:
      case 97:
         return jjMoveStringLiteralDfa2_0(active0, 0x82000000L);
      case 69:
      case 101:
         return jjMoveStringLiteralDfa2_0(active0, 0x200000000L);
      case 124:
         if ((active0 & 0x40000L) != 0L)
            return jjStopAtPos(1, 18);
         break;
      default :
         break;
   }
   return jjStartNfa_0(0, active0);
}
private int jjMoveStringLiteralDfa2_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(0, old0);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(1, active0);
      return 2;
   }
   switch(curChar)
   {
      case 47:
         return jjMoveStringLiteralDfa3_0(active0, 0x80000L);
      case 69:
      case 101:
         return jjMoveStringLiteralDfa3_0(active0, 0x200000000L);
      case 83:
      case 115:
         return jjMoveStringLiteralDfa3_0(active0, 0x2000000L);
      case 89:
      case 121:
         if ((active0 & 0x80000000L) != 0L)
            return jjStopAtPos(2, 31);
         break;
      default :
         break;
   }
   return jjStartNfa_0(1, active0);
}
private int jjMoveStringLiteralDfa3_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(1, old0);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(2, active0);
      return 3;
   }
   switch(curChar)
   {
      case 55:
         if ((active0 & 0x80000L) != 0L)
            return jjStopAtPos(3, 19);
         break;
      case 75:
      case 107:
         if ((active0 & 0x200000000L) != 0L)
            return jjStopAtPos(3, 33);
         break;
      case 84:
      case 116:
         return jjMoveStringLiteralDfa4_0(active0, 0x2000000L);
      default :
         break;
   }
   return jjStartNfa_0(2, active0);
}
private int jjMoveStringLiteralDfa4_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(2, old0);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(3, active0);
      return 4;
   }
   switch(curChar)
   {
      case 69:
      case 101:
         return jjMoveStringLiteralDfa5_0(active0, 0x2000000L);
      default :
         break;
   }
   return jjStartNfa_0(3, active0);
}
private int jjMoveStringLiteralDfa5_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(3, old0);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(4, active0);
      return 5;
   }
   switch(curChar)
   {
      case 82:
      case 114:
         if ((active0 & 0x2000000L) != 0L)
            return jjStopAtPos(5, 25);
         break;
      default :
         break;
   }
   return jjStartNfa_0(4, active0);
}
private int jjStartNfaWithStates_0(int pos, int kind, int state)
{
   jjmatchedKind = kind;
   jjmatchedPos = pos;
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) { return pos + 1; }
   return jjMoveNfa_0(state, pos + 1);
}
private int jjMoveNfa_0(int startState, int curPos)
{
   int startsAt = 0;
   jjnewStateCnt = 92;
   int i = 1;
   jjstateSet[0] = startState;
   int kind = 0x7fffffff;
   for (;;)
   {
      if (++jjround == 0x7fffffff)
         ReInitRounds();
      if (curChar < 64)
      {
         long l = 1L << curChar;
         do
         {
            switch(jjstateSet[--i])
            {
               case 0:
                  if ((0x3ff000000000000L & l) != 0L)
                  {
                     if (kind > 14)
                        kind = 14;
                     jjCheckNAdd(33);
                  }
                  else if ((0x100000200L & l) != 0L)
                  {
                     if (kind > 17)
                        kind = 17;
                  }
                  else if (curChar == 58)
                     jjstateSet[jjnewStateCnt++] = 1;
                  break;
               case 1:
                  if ((0x3f000000000000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 2;
                  break;
               case 2:
                  if ((0x3ff000000000000L & l) != 0L && kind > 15)
                     kind = 15;
                  break;
               case 3:
                  if ((0x100000200L & l) != 0L)
                     kind = 17;
                  break;
               case 33:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 14)
                     kind = 14;
                  jjCheckNAdd(33);
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      else if (curChar < 128)
      {
         long l = 1L << (curChar & 077);
         do
         {
            switch(jjstateSet[--i])
            {
               case 52:
                  if ((0x20000000200000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 68;
                  else if ((0x10000000100L & l) != 0L)
                  {
                     if (kind > 23)
                        kind = 23;
                  }
                  else if ((0x2000000020L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 57;
                  else if ((0x200000002L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 54;
                  if ((0x20000000200000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 63;
                  else if ((0x200000002L & l) != 0L)
                  {
                     if (kind > 20)
                        kind = 20;
                  }
                  if ((0x20000000200000L & l) != 0L)
                     jjCheckNAdd(36);
                  if ((0x20000000200000L & l) != 0L)
                  {
                     if (kind > 20)
                        kind = 20;
                  }
                  break;
               case 0:
                  if ((0x10000000100000L & l) != 0L)
                     jjCheckNAddStates(0, 3);
                  else if ((0x1000000010L & l) != 0L)
                     jjAddStates(4, 6);
                  else if ((0x800000008000L & l) != 0L)
                     jjAddStates(7, 9);
                  else if ((0x8000000080000L & l) != 0L)
                     jjCheckNAddStates(10, 17);
                  else if ((0x4000000040L & l) != 0L)
                     jjAddStates(18, 20);
                  else if ((0x80000000800000L & l) != 0L)
                     jjAddStates(21, 22);
                  else if ((0x200000002000L & l) != 0L)
                     jjAddStates(23, 26);
                  else if ((0x200000002L & l) != 0L)
                     jjAddStates(27, 28);
                  else if ((0x40000000400L & l) != 0L)
                     jjAddStates(29, 31);
                  else if ((0x20000000200000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 20;
                  else if ((0x800000008L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 13;
                  else if ((0x1000000010000L & l) != 0L)
                     jjCheckNAdd(7);
                  else if ((0x400000004000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 5;
                  break;
               case 42:
                  if ((0x2000000020L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 43;
                  if ((0x2000000020L & l) != 0L)
                  {
                     if (kind > 20)
                        kind = 20;
                  }
                  break;
               case 79:
                  if ((0x20000000200000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 84;
                  else if ((0x200000002L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 81;
                  else if ((0x2000000020L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 78;
                  break;
               case 4:
                  if ((0x40000000400000L & l) != 0L)
                     kind = 22;
                  break;
               case 5:
                  if ((0x800000008000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 4;
                  break;
               case 6:
                  if ((0x400000004000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 5;
                  break;
               case 7:
                  if ((0x10000000100L & l) != 0L && kind > 23)
                     kind = 23;
                  break;
               case 8:
                  if ((0x1000000010000L & l) != 0L)
                     jjCheckNAdd(7);
                  break;
               case 9:
                  if ((0x1000000010L & l) != 0L && kind > 26)
                     kind = 26;
                  break;
               case 10:
                  if ((0x2000000020L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 9;
                  break;
               case 11:
                  if ((0x8000000080000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 10;
                  break;
               case 12:
                  if ((0x800000008000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 11;
                  break;
               case 13:
                  if ((0x100000001000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 12;
                  break;
               case 14:
                  if ((0x800000008L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 13;
                  break;
               case 15:
                  if ((0x400000004000L & l) != 0L && kind > 26)
                     kind = 26;
                  break;
               case 16:
                  if ((0x80000000800000L & l) != 0L)
                     jjCheckNAdd(15);
                  break;
               case 17:
                  if ((0x800000008000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 16;
                  break;
               case 18:
                  if ((0x400000004000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 17;
                  break;
               case 19:
                  if ((0x80000000800L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 18;
                  break;
               case 20:
                  if ((0x400000004000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 19;
                  break;
               case 21:
                  if ((0x20000000200000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 20;
                  break;
               case 22:
                  if ((0x40000000400L & l) != 0L)
                     jjAddStates(29, 31);
                  break;
               case 23:
                  if ((0x400000004000L & l) != 0L && kind > 22)
                     kind = 22;
                  break;
               case 24:
                  if ((0x200000002L & l) != 0L)
                     jjCheckNAdd(23);
                  break;
               case 25:
                  if ((0x20000000200000L & l) != 0L)
                     jjCheckNAdd(23);
                  break;
               case 26:
                  if ((0x100000001000L & l) != 0L && kind > 22)
                     kind = 22;
                  break;
               case 27:
                  if ((0x20000000200000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 26;
                  break;
               case 28:
                  if ((0x200000002L & l) != 0L)
                     jjAddStates(27, 28);
                  break;
               case 29:
                  if ((0x4000000040000L & l) != 0L && kind > 22)
                     kind = 22;
                  break;
               case 30:
                  if ((0x1000000010000L & l) != 0L)
                     jjCheckNAdd(29);
                  break;
               case 31:
                  if ((0x8000000080L & l) != 0L)
                     kind = 22;
                  break;
               case 32:
                  if ((0x20000000200000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 31;
                  break;
               case 34:
                  if ((0x200000002000L & l) != 0L)
                     jjAddStates(23, 26);
                  break;
               case 35:
                  if ((0x800000008000L & l) != 0L && kind > 20)
                     kind = 20;
                  break;
               case 36:
                  if ((0x400000004000L & l) != 0L && kind > 21)
                     kind = 21;
                  break;
               case 37:
                  if ((0x800000008000L & l) != 0L)
                     jjCheckNAdd(36);
                  break;
               case 38:
                  if ((0x200000002L & l) != 0L)
                     jjCheckNAdd(29);
                  break;
               case 39:
                  if ((0x200000002000000L & l) != 0L)
                     kind = 22;
                  break;
               case 40:
                  if ((0x200000002L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 39;
                  break;
               case 41:
                  if ((0x80000000800000L & l) != 0L)
                     jjAddStates(21, 22);
                  break;
               case 43:
                  if ((0x1000000010L & l) != 0L && kind > 21)
                     kind = 21;
                  break;
               case 44:
                  if ((0x2000000020L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 43;
                  break;
               case 45:
                  if ((0x4000000040L & l) != 0L)
                     jjAddStates(18, 20);
                  break;
               case 46:
                  if ((0x4000000040000L & l) != 0L && kind > 20)
                     kind = 20;
                  break;
               case 47:
                  if ((0x20000000200L & l) != 0L && kind > 21)
                     kind = 21;
                  break;
               case 48:
                  if ((0x4000000040000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 47;
                  break;
               case 49:
                  if ((0x400000004L & l) != 0L)
                     kind = 22;
                  break;
               case 50:
                  if ((0x2000000020L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 49;
                  break;
               case 51:
                  if ((0x8000000080000L & l) != 0L)
                     jjCheckNAddStates(10, 17);
                  break;
               case 53:
                  if ((0x20000000200000L & l) != 0L && kind > 20)
                     kind = 20;
                  break;
               case 54:
                  if ((0x10000000100000L & l) != 0L && kind > 21)
                     kind = 21;
                  break;
               case 55:
                  if ((0x200000002L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 54;
                  break;
               case 56:
                  if ((0x20000000200000L & l) != 0L)
                     jjCheckNAdd(36);
                  break;
               case 57:
                  if ((0x1000000010000L & l) != 0L && kind > 22)
                     kind = 22;
                  break;
               case 58:
                  if ((0x2000000020L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 57;
                  break;
               case 59:
                  if ((0x2000000020L & l) != 0L && kind > 24)
                     kind = 24;
                  break;
               case 60:
                  if ((0x8000000080000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 59;
                  break;
               case 61:
                  if ((0x20000000200L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 60;
                  break;
               case 62:
                  if ((0x4000000040000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 61;
                  break;
               case 63:
                  if ((0x400000004000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 62;
                  break;
               case 64:
                  if ((0x20000000200000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 63;
                  break;
               case 65:
                  if ((0x10000000100000L & l) != 0L && kind > 24)
                     kind = 24;
                  break;
               case 66:
                  if ((0x2000000020L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 65;
                  break;
               case 67:
                  if ((0x8000000080000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 66;
                  break;
               case 68:
                  if ((0x400000004000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 67;
                  break;
               case 69:
                  if ((0x20000000200000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 68;
                  break;
               case 70:
                  if ((0x800000008000L & l) != 0L)
                     jjAddStates(7, 9);
                  break;
               case 71:
                  if ((0x10000000100000L & l) != 0L && kind > 22)
                     kind = 22;
                  break;
               case 72:
                  if ((0x800000008L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 71;
                  break;
               case 73:
                  if ((0x2000000020L & l) != 0L)
                     jjCheckNAdd(15);
                  break;
               case 74:
                  if ((0x1000000010000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 73;
                  break;
               case 75:
                  if ((0x4000000040L & l) != 0L && kind > 26)
                     kind = 26;
                  break;
               case 76:
                  if ((0x4000000040L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 75;
                  break;
               case 77:
                  if ((0x1000000010L & l) != 0L)
                     jjAddStates(4, 6);
                  break;
               case 78:
                  if ((0x800000008L & l) != 0L && kind > 22)
                     kind = 22;
                  break;
               case 80:
                  if ((0x400000004000L & l) != 0L && kind > 24)
                     kind = 24;
                  break;
               case 81:
                  if ((0x80000000800000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 80;
                  break;
               case 82:
                  if ((0x200000002L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 81;
                  break;
               case 83:
                  if ((0x80000000800L & l) != 0L && kind > 24)
                     kind = 24;
                  break;
               case 84:
                  if ((0x8000000080000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 83;
                  break;
               case 85:
                  if ((0x20000000200000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 84;
                  break;
               case 86:
                  if ((0x10000000100000L & l) != 0L)
                     jjCheckNAddStates(0, 3);
                  break;
               case 87:
                  if ((0x10000000100L & l) != 0L && kind > 20)
                     kind = 20;
                  break;
               case 88:
                  if ((0x2000000020L & l) != 0L && kind > 21)
                     kind = 21;
                  break;
               case 89:
                  if ((0x20000000200000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 88;
                  break;
               case 90:
                  if ((0x20000000200000L & l) != 0L && kind > 21)
                     kind = 21;
                  break;
               case 91:
                  if ((0x10000000100L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 90;
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      else
      {
         int hiByte = (int)(curChar >> 8);
         int i1 = hiByte >> 6;
         long l1 = 1L << (hiByte & 077);
         int i2 = (curChar & 0xff) >> 6;
         long l2 = 1L << (curChar & 077);
         do
         {
            switch(jjstateSet[--i])
            {
               default : break;
            }
         } while(i != startsAt);
      }
      if (kind != 0x7fffffff)
      {
         jjmatchedKind = kind;
         jjmatchedPos = curPos;
         kind = 0x7fffffff;
      }
      ++curPos;
      if ((i = jjnewStateCnt) == (startsAt = 92 - (jjnewStateCnt = startsAt)))
         return curPos;
      try { curChar = input_stream.readChar(); }
      catch(java.io.IOException e) { return curPos; }
   }
}
private int jjMoveStringLiteralDfa0_1()
{
   return jjMoveNfa_1(0, 0);
}
static final long[] jjbitVec0 = {
   0xfffffffffffffffeL, 0xffffffffffffffffL, 0xffffffffffffffffL, 0xffffffffffffffffL
};
static final long[] jjbitVec2 = {
   0x0L, 0x0L, 0xffffffffffffffffL, 0xffffffffffffffffL
};
private int jjMoveNfa_1(int startState, int curPos)
{
   int startsAt = 0;
   jjnewStateCnt = 2;
   int i = 1;
   jjstateSet[0] = startState;
   int kind = 0x7fffffff;
   for (;;)
   {
      if (++jjround == 0x7fffffff)
         ReInitRounds();
      if (curChar < 64)
      {
         long l = 1L << curChar;
         do
         {
            switch(jjstateSet[--i])
            {
               case 0:
                  if ((0xfffffffbffffffffL & l) != 0L)
                  {
                     if (kind > 13)
                        kind = 13;
                  }
                  else if (curChar == 34)
                  {
                     if (kind > 12)
                        kind = 12;
                  }
                  break;
               case 1:
                  if ((0xfffffffbffffffffL & l) != 0L)
                     kind = 13;
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      else if (curChar < 128)
      {
         long l = 1L << (curChar & 077);
         do
         {
            switch(jjstateSet[--i])
            {
               case 0:
                  if ((0xffffffffefffffffL & l) != 0L)
                     kind = 13;
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      else
      {
         int hiByte = (int)(curChar >> 8);
         int i1 = hiByte >> 6;
         long l1 = 1L << (hiByte & 077);
         int i2 = (curChar & 0xff) >> 6;
         long l2 = 1L << (curChar & 077);
         do
         {
            switch(jjstateSet[--i])
            {
               case 0:
                  if (jjCanMove_0(hiByte, i1, i2, l1, l2) && kind > 13)
                     kind = 13;
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      if (kind != 0x7fffffff)
      {
         jjmatchedKind = kind;
         jjmatchedPos = curPos;
         kind = 0x7fffffff;
      }
      ++curPos;
      if ((i = jjnewStateCnt) == (startsAt = 2 - (jjnewStateCnt = startsAt)))
         return curPos;
      try { curChar = input_stream.readChar(); }
      catch(java.io.IOException e) { return curPos; }
   }
}
static final int[] jjnextStates = {
   53, 87, 89, 91, 79, 82, 85, 72, 74, 76, 52, 53, 55, 56, 58, 7, 
   64, 69, 46, 48, 50, 42, 44, 35, 37, 38, 40, 30, 32, 24, 25, 27, 
};
private static final boolean jjCanMove_0(int hiByte, int i1, int i2, long l1, long l2)
{
   switch(hiByte)
   {
      case 0:
         return ((jjbitVec2[i2] & l2) != 0L);
      default :
         if ((jjbitVec0[i1] & l1) != 0L)
            return true;
         return false;
   }
}

/** Token literal values. */
public static final String[] jjstrLiteralImages = {
"", null, null, null, null, "\54", "\73", "\72", "\53", "\55", "\57", "\42", 
null, null, null, null, null, null, "\174\174", "\62\64\57\67", null, null, null, 
null, null, null, null, "\50", "\51", "\133", "\135", null, null, null, };

/** Lexer state names. */
public static final String[] lexStateNames = {
   "DEFAULT",
   "COMMENT_STATE",
};

/** Lex State array. */
public static final int[] jjnewLexState = {
   -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 1, 0, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
   -1, -1, -1, -1, -1, -1, -1, -1, -1, 
};
static final long[] jjtoToken = {
   0x3ffffffe1L, 
};
static final long[] jjtoSkip = {
   0x1eL, 
};
protected SimpleCharStream input_stream;
private final int[] jjrounds = new int[92];
private final int[] jjstateSet = new int[184];
protected char curChar;
/** Constructor. */
public OpeningHoursParserTokenManager(SimpleCharStream stream){
   if (SimpleCharStream.staticFlag)
      throw new Error("ERROR: Cannot use a static CharStream class with a non-static lexical analyzer.");
   input_stream = stream;
}

/** Constructor. */
public OpeningHoursParserTokenManager(SimpleCharStream stream, int lexState){
   this(stream);
   SwitchTo(lexState);
}

/** Reinitialise parser. */
public void ReInit(SimpleCharStream stream)
{
   jjmatchedPos = jjnewStateCnt = 0;
   curLexState = defaultLexState;
   input_stream = stream;
   ReInitRounds();
}
private void ReInitRounds()
{
   int i;
   jjround = 0x80000001;
   for (i = 92; i-- > 0;)
      jjrounds[i] = 0x80000000;
}

/** Reinitialise parser. */
public void ReInit(SimpleCharStream stream, int lexState)
{
   ReInit(stream);
   SwitchTo(lexState);
}

/** Switch to specified lex state. */
public void SwitchTo(int lexState)
{
   if (lexState >= 2 || lexState < 0)
      throw new TokenMgrError("Error: Ignoring invalid lexical state : " + lexState + ". State unchanged.", TokenMgrError.INVALID_LEXICAL_STATE);
   else
      curLexState = lexState;
}

protected Token jjFillToken()
{
   final Token t;
   final String curTokenImage;
   final int beginLine;
   final int endLine;
   final int beginColumn;
   final int endColumn;
   String im = jjstrLiteralImages[jjmatchedKind];
   curTokenImage = (im == null) ? input_stream.GetImage() : im;
   beginLine = input_stream.getBeginLine();
   beginColumn = input_stream.getBeginColumn();
   endLine = input_stream.getEndLine();
   endColumn = input_stream.getEndColumn();
   t = Token.newToken(jjmatchedKind, curTokenImage);

   t.beginLine = beginLine;
   t.endLine = endLine;
   t.beginColumn = beginColumn;
   t.endColumn = endColumn;

   return t;
}

int curLexState = 0;
int defaultLexState = 0;
int jjnewStateCnt;
int jjround;
int jjmatchedPos;
int jjmatchedKind;

/** Get the next Token. */
public Token getNextToken() 
{
  Token matchedToken;
  int curPos = 0;

  EOFLoop :
  for (;;)
  {
   try
   {
      curChar = input_stream.BeginToken();
   }
   catch(java.io.IOException e)
   {
      jjmatchedKind = 0;
      matchedToken = jjFillToken();
      return matchedToken;
   }

   switch(curLexState)
   {
     case 0:
       try { input_stream.backup(0);
          while (curChar <= 13 && (0x2400L & (1L << curChar)) != 0L)
             curChar = input_stream.BeginToken();
       }
       catch (java.io.IOException e1) { continue EOFLoop; }
       jjmatchedKind = 0x7fffffff;
       jjmatchedPos = 0;
       curPos = jjMoveStringLiteralDfa0_0();
       break;
     case 1:
       jjmatchedKind = 0x7fffffff;
       jjmatchedPos = 0;
       curPos = jjMoveStringLiteralDfa0_1();
       break;
   }
     if (jjmatchedKind != 0x7fffffff)
     {
        if (jjmatchedPos + 1 < curPos)
           input_stream.backup(curPos - jjmatchedPos - 1);
        if ((jjtoToken[jjmatchedKind >> 6] & (1L << (jjmatchedKind & 077))) != 0L)
        {
           matchedToken = jjFillToken();
       if (jjnewLexState[jjmatchedKind] != -1)
         curLexState = jjnewLexState[jjmatchedKind];
           return matchedToken;
        }
        else
        {
         if (jjnewLexState[jjmatchedKind] != -1)
           curLexState = jjnewLexState[jjmatchedKind];
           continue EOFLoop;
        }
     }
     int error_line = input_stream.getEndLine();
     int error_column = input_stream.getEndColumn();
     String error_after = null;
     boolean EOFSeen = false;
     try { input_stream.readChar(); input_stream.backup(1); }
     catch (java.io.IOException e1) {
        EOFSeen = true;
        error_after = curPos <= 1 ? "" : input_stream.GetImage();
        if (curChar == '\n' || curChar == '\r') {
           error_line++;
           error_column = 0;
        }
        else
           error_column++;
     }
     if (!EOFSeen) {
        input_stream.backup(1);
        error_after = curPos <= 1 ? "" : input_stream.GetImage();
     }
     throw new TokenMgrError(EOFSeen, curLexState, error_line, error_column, error_after, curChar, TokenMgrError.LEXICAL_ERROR);
  }
}

private void jjCheckNAdd(int state)
{
   if (jjrounds[state] != jjround)
   {
      jjstateSet[jjnewStateCnt++] = state;
      jjrounds[state] = jjround;
   }
}
private void jjAddStates(int start, int end)
{
   do {
      jjstateSet[jjnewStateCnt++] = jjnextStates[start];
   } while (start++ != end);
}
private void jjCheckNAddTwoStates(int state1, int state2)
{
   jjCheckNAdd(state1);
   jjCheckNAdd(state2);
}

private void jjCheckNAddStates(int start, int end)
{
   do {
      jjCheckNAdd(jjnextStates[start]);
   } while (start++ != end);
}

}
