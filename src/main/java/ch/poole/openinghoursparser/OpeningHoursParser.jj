/**
 * Parser for OpenStreetMap opening_hours values
 * See http://wiki.openstreetmap.org/wiki/Key:opening_hours/specification
 *
 * @author Simon Poole
 *
 * Copyright (c) 2015 Simon Poole
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy of this software
 * and associated documentation files (the "Software"), to deal in the Software without restriction,
 * including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense,
 * and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so,
 * subject to the following conditions:
 * 
 * The above copyright notice and this permission notice shall be included in all copies
 * or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING
 * BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.
 * IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY,
 * WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE
 " OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
 */
options{  JDK_VERSION = "1.5";  static = false;  LOOKAHEAD= 5;  IGNORE_CASE = true;  FORCE_LA_CHECK = true;  CHOICE_AMBIGUITY_CHECK = 2;  OTHER_AMBIGUITY_CHECK = 2;  DEBUG_PARSER = false;  DEBUG_LOOKAHEAD = false;  DEBUG_TOKEN_MANAGER = false;  UNICODE_INPUT = true;}PARSER_BEGIN(OpeningHoursParser)

package ch.poole.openinghoursparser;
 import java.util.ArrayList;import java.util.Collections;
import java.util.Locale;import java.io.ByteArrayInputStream;public class OpeningHoursParser{
	boolean strict = false;}PARSER_END(OpeningHoursParser)SKIP :{  "\r"| "\n"| " "| "\t"}TOKEN :{  < COMMA : "," >| < SEMICOLON : ";" >| < COLON : ":" >| < PLUS : "+" >| < HYPHEN : [ "-", "\u2013" ] >| < SLASH : "/" >}TOKEN :{  < QUOTE : "\"" > : COMMENT_STATE}< COMMENT_STATE >TOKEN :{  < ENDQUOTE : < QUOTE >> : DEFAULT| < CHAR : ~[ "\"", "\\" ] >}// parse all numbers as number and do the range checking in syntactic lookahead
TOKEN :{  < NUMBER : (< DIGIT >)+ >}//
TOKEN :{  < MINUTES : < COLON > [ "0"-"5" ] < DIGIT >>}TOKEN :{  < DIGIT : [ "0"-"9" ] >}TOKEN :{  < WS : [ " ", "\t" ] >}TOKEN :{  < FALLBACKSEPERATOR : "||" >}TOKEN :{  < ALWAYS : "24/7" >}TOKEN :{  < WEEKDAY :    "Mo"  | "Tu"  | "We"  | "Th"  | "Fr"  | "Sa"  | "Su" >
  {
          matchedToken.image = Util.capitalize(image.toString());  }| < WEEKDAY3 :    "Mon"  | "Tue"  | "Wed"  | "Thu"  | "Fri"  | "Sat"  | "Sun" >
  {
          matchedToken.image = Util.capitalize(image.toString()).substring(0, 2);
  }| < MONTH :    "Jan"  | "Feb"  | "Mar"  | "Apr"  | "May"  | "Jun"  | "Jul"  | "Aug"  | "Sep"  | "Oct"  | "Nov"  | "Dec" >
  {
          matchedToken.image = Util.capitalize(image.toString());
  }| < HOLIDAYS :    "SH"  | "PH" >
  {
          matchedToken.image = image.toString().toUpperCase(Locale.US);
  }| < EVENTS :    "sunrise"  | "sunset"  | "dawn"  | "dusk" >
  {
          matchedToken.image = image.toString().toLowerCase(Locale.US);
  }| < VARDATE : "easter" >
  {
          matchedToken.image = image.toString().toLowerCase(Locale.US);
  }}TOKEN :{  < MODIFIER :    "open"  | "closed"  | "off"  | "unknown" >
  {
          matchedToken.image = image.toString().toLowerCase(Locale.US);
  }}

TOKEN :
{  < AM : "am" >
| < PM : "pm" >
}/**
 * match a number between 1 and 5
 */Token one2five() :{  Token n = null;}{  LOOKAHEAD({ getToken(1).kind == NUMBER && Integer.parseInt(getToken(1).image) >= 1 && Integer.parseInt(getToken(1).image) <= 5 })  n = < NUMBER >  {    return n;  }}/**
 * match a positive number larger than 1
 */Token number() :{  Token n = null;}{  LOOKAHEAD({ getToken(1).kind == NUMBER && Integer.parseInt(getToken(1).image) >= 1 })  n = < NUMBER >  {    return n;  }}/**
 * Match a comment.
 */String comment() :{  StringBuilder builder = new StringBuilder();}{  < QUOTE >  (    getChar(builder)  )*  < ENDQUOTE >  {    return builder.toString();  }}/**
 * Match char inside quoted string.
 */void getChar(StringBuilder builder) :{  Token t;}{  (t = < CHAR >)  {    if (t.image.length() < 2)    {      // CHAR
      builder.append(t.image.charAt(0));    }  }}

/**
 * returns a number if between 0 and 24
 * uses semantic lookahead
 */Token hours() :{  Token h = null;}{  LOOKAHEAD({ getToken(1).kind == NUMBER && Integer.parseInt(getToken(1).image) >= 0 && Integer.parseInt(getToken(1).image) <= 24 })  h = < NUMBER >  {    return h;  }}
/**
 * returns the total number of minutes for a time of the form hh:00 or just hh 
 */int time() :{  Token h = null;  Token m = null;  int result = 0;
  boolean pm = false;}{  (    h = hours()  )  (    m = < MINUTES >    {      result = Integer.parseInt(m.image.substring(1));    }  )?
  (
    pm = ampm()  )?  {    result = result + Integer.parseInt(h.image) * 60;
    if (pm) {
      result = result + 12*60;
    }    return result;  }}

boolean ampm() :
{
  boolean found = false;
  boolean result = false;
}
{
  (
    (      < AM >
      {
		found = true;
      }
    )
  |
    (
      < PM >
      {
		found = true;
		result = true;
      }
    )
  )
  {
	  if (found && strict) {
        ParseException pex = new ParseException("AM found at line " + token.next.beginLine + ", column " + token.next.beginColumn);
	    pex.currentToken = token;
        throw pex;
      }
      return result;
  }
}

/**
 * time that requires minutes as per spec
 * currently not used
 */
int strict_time() :
{
  Token h = null;
  Token m = null;
  int result = 0;
}
{
  (
    h = hours()
  )
  (
    m = < MINUTES >
    {
      result = Integer.parseInt(m.image.substring(1));
    }
  )
  {
    result = result + Integer.parseInt(h.image) * 60;
    return result;
  }
}
/**
 * returns the total number of minutes for a time of the form hh:00 or just hh with hh up to 48 
 */int extendedtime() :{  Token h = null;  Token m = null;  int result = 0;
  boolean pm = false;}{  (    LOOKAHEAD({ getToken(1).kind == NUMBER && Integer.parseInt(getToken(1).image) >= 0 && Integer.parseInt(getToken(1).image) <= 48 })    h = < NUMBER >  )  (    m = < MINUTES >    {      result = Integer.parseInt(m.image.substring(1));    }  )?
  (
    pm = ampm()
  )?  {    result = result + Integer.parseInt(h.image) * 60;
    if (pm) {
      result = result + 12*60;
    }    return result;  }}VariableTime variabletime() :{  Token event = null;  Token sign = null;  int offset = 0;  VariableTime vt = new VariableTime();}{  (event = < EVENTS >  {    vt.event = event.image;    return vt;  }  )|  (    "(" event = < EVENTS >    (      sign = < PLUS >    | sign = < HYPHEN >    )    offset = time() ")"    {      vt.event = event.image;      vt.offset = (sign.image.equals("-") ? - 1 : 1) * offset;    }  )  {    return vt;  }}int interval() :{  Token minutes = null;  Token hours = null;  int interval = 0;}{  < SLASH >  (    (      (        minutes = number()      )      {        interval = Integer.parseInt(minutes.image);      }    )  |    (      hours = hours() minutes = < MINUTES >      {        interval = Integer.parseInt(hours.image) * 60 + Integer.parseInt(minutes.image.substring(1));      }    )  )  {    return interval;  }}TimeSpan timespan() :{  int start = 0;  int end =-1;  Token startplus = null;  Token endplus = null;  VariableTime startVT = null;  VariableTime endVT = null;  TimeSpan ts = new TimeSpan();  int inter = 0;}{  (    (      start = time()      {        ts.start = start;      }    | startVT = variabletime()      {        ts.startEvent = startVT;      }    )    (      startplus = < PLUS >    |      (        < HYPHEN >        (          end = extendedtime()          {
            if (end < start) {  
              if (!strict)  
              {
                // non-strict, add 24h
                end = end + 24*60;
              } else {
                ParseException pex = new ParseException("End time earlier than start time at line " + token.next.beginLine + ", column " + token.next.beginColumn);
			    pex.currentToken = token;
                throw pex;
              }
            }            ts.end = end;          }        | endVT = variabletime()          {            ts.endEvent = endVT;          }        )        (          endplus = < PLUS >        |          (            inter = interval()            {              ts.interval = inter;            }          )        )?      )    )?    {      ts.openEnded = startplus != null || endplus != null;      return ts;    }  )| (< ALWAYS >  {    ts.twentyfourseven = true;    return ts;  }  )}ArrayList < TimeSpan > time_selector() :{  TimeSpan ts, ts1;  ArrayList < TimeSpan > result = new ArrayList < TimeSpan > ();}{  (    ts = timespan()    (      < COMMA > ts1 = timespan()      {        result.add(0, ts1);      }    )*  )  {    result.add(ts);    Collections.reverse(result);    return result;  }}String weekday() :{  Token w = null;}{  (w = < WEEKDAY >  {    return w.image;  }  )|  (    w = < WEEKDAY3 >    {
      if (strict) {
        ParseException e = new ParseException("Three character weekday at line " + token.next.beginLine + ", column " + token.next.beginColumn);
		e.currentToken = token;
        throw e;
      }      return w.image;    }  )}// Mo-
// Mo-Fr
// Mo[1]
// Mo[1,3,5]
WeekDayRange weekday_range() :{  String startDay = null;  String endDay = null;  Nth nth = null;  Nth nth1 = null;  WeekDayRange wdr = new WeekDayRange();}{  startDay = weekday()  (    (      (        < HYPHEN > endDay = weekday()        {          wdr.endDay = endDay;        }      )    )  |    (      (        "[" nth = nth()        (          < COMMA > nth1 = nth()          {            wdr.nths.add(nth1);          }        )*        {          wdr.nths.add(nth);          Collections.reverse(wdr.nths);        }        "]"      )    )  )?  {    wdr.startDay = startDay;    return wdr;  }}Nth nth() :{  Nth n = new Nth();  Token t1 = null;  Token t2 = null;}{  (    t1 = one2five()    {      n.startNth = Integer.parseInt(t1.image);    }  )?  (    < HYPHEN > t2 = one2five()    {      n.endNth = Integer.parseInt(t2.image);    }  )?  {    return n;  }}ArrayList < WeekDayRange > weekday_selector() :{  WeekDayRange wdr, wdr1;  ArrayList < WeekDayRange > result = new ArrayList < WeekDayRange > ();}{  wdr = weekday_range()  (    < COMMA > wdr1 = weekday_range()    {      result.add(0, wdr1);    }  )*  {    result.add(wdr);    Collections.reverse(result);    return result;  }}Holiday holiday() :{  Token h = null;  Token n = null;  Token m = null;  Holiday result = new Holiday();}{  h = < HOLIDAYS >  (    (      (        m = < HYPHEN >      | < PLUS >      )      n = number()    )    "day" ("s")?    {      result.offset = Integer.parseInt(n.image);      if (m != null)      {        result.offset = result.offset * - 1;      }    }  )?  {    result.type = Holiday.Type.valueOf(h.image.toUpperCase()); // the enum values are in upper case
    return result;  }}ArrayList < Holiday > holiday_sequence() :{  Holiday h = null;  Holiday h1 = null;  ArrayList < Holiday > result = new ArrayList < Holiday > ();}{  h = holiday()  (    < COMMA > h1 = holiday()    {      result.add(0, h1);    }  )*  {    result.add(h);    Collections.reverse(result);    return result;  }}String month() :{  Token m = null;}{  m = < MONTH >  {    return m.image;  }}MonthDayRange monthday_range() :{  Token nth = null;  Token year = null;  Token n = null;  String startMonth = null;  String endMonth = null;  MonthDayRange mdr = new MonthDayRange();  DateWithOffset startDate = null;  DateWithOffset endDate = null;  Token plus = null;}{  startDate = datewithoffset() (plus = < PLUS >)?  {    mdr.startDate = startDate;    startDate.openEnded = plus != null;  }  (    < HYPHEN >    (      endDate = datewithoffset()      {        mdr.endDate = endDate;      }    )  )?  {    return mdr;  }}int daynum() :{  Token n = null;}{  (    LOOKAHEAD({ getToken(1).kind == NUMBER && Integer.parseInt(getToken(1).image) >= 1 && Integer.parseInt(getToken(1).image) <= 31 })    n = < NUMBER >  )  {    return Integer.parseInt(n.image);  }}

int year() :
{
  Token n = null;
}
{
  (
    LOOKAHEAD({ getToken(1).kind == NUMBER && Integer.parseInt(getToken(1).image) >= 1900})
    n = < NUMBER >
  )
  {
    return Integer.parseInt(n.image);
  }
}DateWithOffset datewithoffset() :{  DateWithOffset dwo = new DateWithOffset();  int y = 0;  Token m = null;  Token d = null;  Token h = null;  Token n = null;  Token v = null;  Token minus = null;  Token num = null;  Token wd = null;}{
    (    y = year()    {      dwo.year = y;    }  )?  (
    LOOKAHEAD(((< MONTH >)? daynum()) | (< VARDATE >), {getToken(2).kind != MINUTES && getToken(3).kind != MINUTES }) // don't parse this if we actually have a time as 2nd token    (      (        (
                    (m = < MONTH >          {            dwo.month = m.image;          }          )?          (            dwo.day = daynum()          )        )      |
// this doesn't seem to be in the spec any more//        (//          m = < MONTH > d = < WEEKDAY > "[" (h = < HYPHEN >)? n = one2five() "]"//          {//            dwo.month = m.image;//            dwo.weekDay = d.image;//            dwo.nth = Integer.parseInt(n.image);//            if (h != null)//            {//              dwo.nth = dwo.nth * - 1;//            }//          }//        )//      |         (          v = < VARDATE >          {            dwo.varDate = v.image;          }        )      )      (        (          minus = < HYPHEN >        | < PLUS >        )        wd = < WEEKDAY >        {          dwo.weekDayOffsetPositive = minus == null;          dwo.weekDayOffset = wd.image;        }      )?      (        (          minus = < HYPHEN >        | < PLUS >        )        (          num = number()          {            dwo.dayOffset = Integer.parseInt(num.image) * (minus != null ? - 1 : 1);          }        )      )?    )
  |     (m = < MONTH >    {      dwo.month = m.image;    }    )  )  {    return dwo;  }}ArrayList < MonthDayRange > monthday_selector() :{  MonthDayRange mdr, mdr1;  ArrayList < MonthDayRange > result = new ArrayList < MonthDayRange > ();}{  mdr = monthday_range()  (    < COMMA > mdr1 = monthday_range()    {      result.add(0, mdr1);    }  )*  {    result.add(mdr);    Collections.reverse(result);    return result;  }}int weeknum() :{  Token n = null;}{  (    LOOKAHEAD({ getToken(1).kind == NUMBER && Integer.parseInt(getToken(1).image) >= 1 && Integer.parseInt(getToken(1).image) <= 54 })    n = < NUMBER >  )  {    return Integer.parseInt(n.image);  }}WeekRange week_range() :{  WeekRange wr = new WeekRange();  Token w = null;  Token w1 = null;}{  wr.startWeek = weeknum()  (    < HYPHEN > wr.endWeek = weeknum()    (      wr.interval = interval()    )?  )?  {    return wr;  }}ArrayList < WeekRange > week_selector() :{  WeekRange wr, wr1;  ArrayList < WeekRange > result = new ArrayList < WeekRange > ();}{  "week" wr = week_range()  (    < COMMA > wr1 = week_range()    {      result.add(0, wr1);    }  )*  {    result.add(wr);    Collections.reverse(result);    return result;  }}

YearRange year_range() :
{
  YearRange yr = new YearRange();
  Token y = null;
  Token y1 = null;
}
{
  yr.startYear = year()
  (
    < HYPHEN > yr.endYear = year()
    (
      yr.interval = interval()
    )?
  )?
  {
    return yr;
  }
}


ArrayList < YearRange > year_selector() :
{
  YearRange yr, yr1;
  ArrayList < YearRange > result = new ArrayList < YearRange > ();
}
{
  LOOKAHEAD({getToken(2).kind != MONTH  && getToken(2).kind != VARDATE})    
  yr = year_range()
  (
    < COMMA > yr1 = year_range()
    {
      result.add(0, yr1);
    }
  )*
  {
    result.add(yr);
    Collections.reverse(result);
    return result;
  }
}RuleModifier rule_modifier() :{  RuleModifier rm = new RuleModifier();  Token m = null;  String c = null;}{  (m = < MODIFIER >  {    rm.modifier = m.image;  }  )?  (    c = comment()    {      rm.comment = c;    }  )?  {
    if (rm.modifier == null && rm.comment == null) {
      return null;
    }    return rm;  }}Rule rule() :{  Rule r = null;
  String comment = null;
  ArrayList < YearRange > ys = null;  ArrayList < WeekRange > ws = null;  ArrayList < MonthDayRange > ms = null;  ArrayList < Holiday > hs = null;  ArrayList < WeekDayRange > ds = null;  ArrayList < TimeSpan > ts = null;  RuleModifier rm = null;}{  (
    LOOKAHEAD(comment() < COLON >)
    (
      comment = comment()
    )
  |     (
      (        ys = year_selector()      )?        (        ws = week_selector()      )?      (        ms = monthday_selector()      )?    )  )
  (  < COLON >  )?  (    hs = holiday_sequence()  |    (      hs = holiday_sequence() (< COMMA >)? ds = weekday_selector()    )  )?  (    ds = weekday_selector()  )?
  // spec is not clear on this, however ":" is used in real life here a lot
  (
  < COLON >
  )?  (    ts = time_selector()  )?  (    rm = rule_modifier()  )  {    r = new Rule();
    r.comment = comment;
    r.years = ys;    r.weeks = ws;    r.monthdays = ms;    r.holidays = hs;    r.days = ds;    r.times = ts;    r.modifier = rm;    return r;  }}ArrayList < Rule > rules(boolean strict) :{
  this.strict = strict;  ArrayList < Rule > result = new ArrayList < Rule > ();  Rule r = null;  Rule r1 = null;}{  r = rule()  (    (      < COMMA >
      (
        r1 = rule()
    	{
    	  r1.replace = false;
      	  result.add(0, r1);
    	}      )    | < SEMICOLON >
      (
        r1 = rule()
    	{
    	  r1.replace = true;
      	  result.add(0, r1);
    	}
      )    | < FALLBACKSEPERATOR >
      (
        r1 = rule()
    	{
    	  r1.replace = false;
    	  r1.fallBack = true;
      	  result.add(0, r1);
    	}
      )    )  )*  < EOF >  {
    r.replace = true;    result.add(r);    Collections.reverse(result);    return result;  }}

< * > TOKEN :
{
  < UNEXPECTED_CHAR : ~[] >
} 
