/* Generated By:JavaCC: Do not edit this line. EG1TokenManager.java */
import java.util.ArrayList;
import java.util.Collections;
import java.io.ByteArrayInputStream;

/** Token Manager. */
public class EG1TokenManager implements EG1Constants
{

  /** Debug output. */
  public static  java.io.PrintStream debugStream = System.out;
  /** Set debug output. */
  public static  void setDebugStream(java.io.PrintStream ds) { debugStream = ds; }
private static final int jjStopStringLiteralDfa_0(int pos, long active0)
{
      debugStream.println("   No more string literal token matches are possible.");
   switch (pos)
   {
      case 0:
         if ((active0 & 0x800000000L) != 0L)
            return 54;
         if ((active0 & 0x800000L) != 0L)
         {
            jjmatchedKind = 12;
            return 88;
         }
         if ((active0 & 0x20L) != 0L)
            return 3;
         if ((active0 & 0x400000000L) != 0L)
            return 63;
         return -1;
      case 1:
         if ((active0 & 0x400000000L) != 0L)
            return 62;
         if ((active0 & 0x800000L) != 0L)
         {
            jjmatchedKind = 12;
            jjmatchedPos = 1;
            return 92;
         }
         return -1;
      case 2:
         if ((active0 & 0x800000L) != 0L)
         {
            if (jjmatchedPos < 1)
            {
               jjmatchedKind = 12;
               jjmatchedPos = 1;
            }
            return -1;
         }
         return -1;
      case 3:
         if ((active0 & 0x800000L) != 0L)
         {
            if (jjmatchedPos < 1)
            {
               jjmatchedKind = 12;
               jjmatchedPos = 1;
            }
            return -1;
         }
         return -1;
      default :
         return -1;
   }
}
private static final int jjStartNfa_0(int pos, long active0)
{
   return jjMoveNfa_0(jjStopStringLiteralDfa_0(pos, active0), pos + 1);
}
static private int jjStopAtPos(int pos, int kind)
{
   jjmatchedKind = kind;
   jjmatchedPos = pos;
   debugStream.println("   No more string literal token matches are possible.");
   debugStream.println("   Currently matched the first " + (jjmatchedPos + 1) + " characters as a " + tokenImage[jjmatchedKind] + " token.");
   return pos + 1;
}
static private int jjMoveStringLiteralDfa0_0()
{
   switch(curChar)
   {
      case 34:
         return jjStopAtPos(0, 9);
      case 40:
         return jjStopAtPos(0, 30);
      case 41:
         return jjStopAtPos(0, 31);
      case 43:
         return jjStopAtPos(0, 6);
      case 44:
         return jjStopAtPos(0, 3);
      case 45:
         return jjStopAtPos(0, 7);
      case 47:
         return jjStopAtPos(0, 8);
      case 50:
         return jjMoveStringLiteralDfa1_0(0x800000L);
      case 58:
         return jjStartNfaWithStates_0(0, 5, 3);
      case 59:
         return jjStopAtPos(0, 4);
      case 91:
         return jjStopAtPos(0, 32);
      case 93:
         return jjStopAtPos(0, 33);
      case 100:
         return jjMoveStringLiteralDfa1_0(0x400000000L);
      case 101:
         return jjMoveStringLiteralDfa1_0(0x10000000L);
      case 115:
         return jjStartNfaWithStates_0(0, 35, 54);
      case 119:
         return jjMoveStringLiteralDfa1_0(0x1000000000L);
      case 124:
         return jjMoveStringLiteralDfa1_0(0x400000L);
      default :
      debugStream.println("   No string literal matches possible.");
         return jjMoveNfa_0(0, 0);
   }
}
static private int jjMoveStringLiteralDfa1_0(long active0)
{
   if (jjmatchedKind != 0 && jjmatchedKind != 0x7fffffff)
      debugStream.println("   Currently matched the first " + (jjmatchedPos + 1) + " characters as a " + tokenImage[jjmatchedKind] + " token.");
   debugStream.println("   Possible string literal matches : { "
 +
         jjKindsForBitVector(0, active0)  + " } ");
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(0, active0);
      if (jjmatchedKind != 0 && jjmatchedKind != 0x7fffffff)
         debugStream.println("   Currently matched the first " + (jjmatchedPos + 1) + " characters as a " + tokenImage[jjmatchedKind] + " token.");
      return 1;
   }
   debugStream.println("<" + lexStateNames[curLexState] + ">" + "Current character : " + TokenMgrError.addEscapes(String.valueOf(curChar)) + " (" + (int)curChar + ") at line " + input_stream.getEndLine() + " column " + input_stream.getEndColumn());
   switch(curChar)
   {
      case 52:
         return jjMoveStringLiteralDfa2_0(active0, 0x800000L);
      case 97:
         return jjMoveStringLiteralDfa2_0(active0, 0x410000000L);
      case 101:
         return jjMoveStringLiteralDfa2_0(active0, 0x1000000000L);
      case 124:
         if ((active0 & 0x400000L) != 0L)
            return jjStopAtPos(1, 22);
         break;
      default :
      debugStream.println("   No string literal matches possible.");
         break;
   }
   return jjStartNfa_0(0, active0);
}
static private int jjMoveStringLiteralDfa2_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(0, old0);
   if (jjmatchedKind != 0 && jjmatchedKind != 0x7fffffff)
      debugStream.println("   Currently matched the first " + (jjmatchedPos + 1) + " characters as a " + tokenImage[jjmatchedKind] + " token.");
   debugStream.println("   Possible string literal matches : { "
 +
         jjKindsForBitVector(0, active0)  + " } ");
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(1, active0);
      if (jjmatchedKind != 0 && jjmatchedKind != 0x7fffffff)
         debugStream.println("   Currently matched the first " + (jjmatchedPos + 1) + " characters as a " + tokenImage[jjmatchedKind] + " token.");
      return 2;
   }
   debugStream.println("<" + lexStateNames[curLexState] + ">" + "Current character : " + TokenMgrError.addEscapes(String.valueOf(curChar)) + " (" + (int)curChar + ") at line " + input_stream.getEndLine() + " column " + input_stream.getEndColumn());
   switch(curChar)
   {
      case 47:
         return jjMoveStringLiteralDfa3_0(active0, 0x800000L);
      case 101:
         return jjMoveStringLiteralDfa3_0(active0, 0x1000000000L);
      case 115:
         return jjMoveStringLiteralDfa3_0(active0, 0x10000000L);
      case 121:
         if ((active0 & 0x400000000L) != 0L)
            return jjStopAtPos(2, 34);
         break;
      default :
      debugStream.println("   No string literal matches possible.");
         break;
   }
   return jjStartNfa_0(1, active0);
}
static private int jjMoveStringLiteralDfa3_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(1, old0);
   if (jjmatchedKind != 0 && jjmatchedKind != 0x7fffffff)
      debugStream.println("   Currently matched the first " + (jjmatchedPos + 1) + " characters as a " + tokenImage[jjmatchedKind] + " token.");
   debugStream.println("   Possible string literal matches : { "
 +
         jjKindsForBitVector(0, active0)  + " } ");
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(2, active0);
      if (jjmatchedKind != 0 && jjmatchedKind != 0x7fffffff)
         debugStream.println("   Currently matched the first " + (jjmatchedPos + 1) + " characters as a " + tokenImage[jjmatchedKind] + " token.");
      return 3;
   }
   debugStream.println("<" + lexStateNames[curLexState] + ">" + "Current character : " + TokenMgrError.addEscapes(String.valueOf(curChar)) + " (" + (int)curChar + ") at line " + input_stream.getEndLine() + " column " + input_stream.getEndColumn());
   switch(curChar)
   {
      case 55:
         if ((active0 & 0x800000L) != 0L)
            return jjStopAtPos(3, 23);
         break;
      case 107:
         if ((active0 & 0x1000000000L) != 0L)
            return jjStopAtPos(3, 36);
         break;
      case 116:
         return jjMoveStringLiteralDfa4_0(active0, 0x10000000L);
      default :
      debugStream.println("   No string literal matches possible.");
         break;
   }
   return jjStartNfa_0(2, active0);
}
static private int jjMoveStringLiteralDfa4_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(2, old0);
   if (jjmatchedKind != 0 && jjmatchedKind != 0x7fffffff)
      debugStream.println("   Currently matched the first " + (jjmatchedPos + 1) + " characters as a " + tokenImage[jjmatchedKind] + " token.");
   debugStream.println("   Possible string literal matches : { "
 +
         jjKindsForBitVector(0, active0)  + " } ");
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(3, active0);
      if (jjmatchedKind != 0 && jjmatchedKind != 0x7fffffff)
         debugStream.println("   Currently matched the first " + (jjmatchedPos + 1) + " characters as a " + tokenImage[jjmatchedKind] + " token.");
      return 4;
   }
   debugStream.println("<" + lexStateNames[curLexState] + ">" + "Current character : " + TokenMgrError.addEscapes(String.valueOf(curChar)) + " (" + (int)curChar + ") at line " + input_stream.getEndLine() + " column " + input_stream.getEndColumn());
   switch(curChar)
   {
      case 101:
         return jjMoveStringLiteralDfa5_0(active0, 0x10000000L);
      default :
      debugStream.println("   No string literal matches possible.");
         break;
   }
   return jjStartNfa_0(3, active0);
}
static private int jjMoveStringLiteralDfa5_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(3, old0);
   if (jjmatchedKind != 0 && jjmatchedKind != 0x7fffffff)
      debugStream.println("   Currently matched the first " + (jjmatchedPos + 1) + " characters as a " + tokenImage[jjmatchedKind] + " token.");
   debugStream.println("   Possible string literal matches : { "
 +
         jjKindsForBitVector(0, active0)  + " } ");
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(4, active0);
      if (jjmatchedKind != 0 && jjmatchedKind != 0x7fffffff)
         debugStream.println("   Currently matched the first " + (jjmatchedPos + 1) + " characters as a " + tokenImage[jjmatchedKind] + " token.");
      return 5;
   }
   debugStream.println("<" + lexStateNames[curLexState] + ">" + "Current character : " + TokenMgrError.addEscapes(String.valueOf(curChar)) + " (" + (int)curChar + ") at line " + input_stream.getEndLine() + " column " + input_stream.getEndColumn());
   switch(curChar)
   {
      case 114:
         if ((active0 & 0x10000000L) != 0L)
            return jjStopAtPos(5, 28);
         break;
      default :
      debugStream.println("   No string literal matches possible.");
         break;
   }
   return jjStartNfa_0(4, active0);
}
static private int jjStartNfaWithStates_0(int pos, int kind, int state)
{
   jjmatchedKind = kind;
   jjmatchedPos = pos;
   debugStream.println("   No more string literal token matches are possible.");
   debugStream.println("   Currently matched the first " + (jjmatchedPos + 1) + " characters as a " + tokenImage[jjmatchedKind] + " token.");
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) { return pos + 1; }
   debugStream.println("<" + lexStateNames[curLexState] + ">" + "Current character : " + TokenMgrError.addEscapes(String.valueOf(curChar)) + " (" + (int)curChar + ") at line " + input_stream.getEndLine() + " column " + input_stream.getEndColumn());
   return jjMoveNfa_0(state, pos + 1);
}
static private int jjMoveNfa_0(int startState, int curPos)
{
   int startsAt = 0;
   jjnewStateCnt = 108;
   int i = 1;
   jjstateSet[0] = startState;
      debugStream.println("   Starting NFA to match one of : " + jjKindsForStateVector(curLexState, jjstateSet, 0, 1));
      debugStream.println("<" + lexStateNames[curLexState] + ">" + "Current character : " + TokenMgrError.addEscapes(String.valueOf(curChar)) + " (" + (int)curChar + ") at line " + input_stream.getEndLine() + " column " + input_stream.getEndColumn());
   int kind = 0x7fffffff;
   for (;;)
   {
      if (++jjround == 0x7fffffff)
         ReInitRounds();
      if (curChar < 64)
      {
         long l = 1L << curChar;
         do
         {
            switch(jjstateSet[--i])
            {
               case 88:
                  if ((0x3ff000000000000L & l) != 0L)
                  {
                     if (kind > 19)
                        kind = 19;
                     jjCheckNAdd(82);
                  }
                  if ((0x3ff000000000000L & l) != 0L)
                  {
                     if (kind > 18)
                        kind = 18;
                  }
                  if ((0x3ff000000000000L & l) != 0L)
                  {
                     if (kind > 17)
                        kind = 17;
                  }
                  if ((0x3ff000000000000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 92;
                  if ((0x1f000000000000L & l) != 0L)
                  {
                     if (kind > 13)
                        kind = 13;
                  }
                  else if ((0x3e0000000000000L & l) != 0L)
                  {
                     if (kind > 13)
                        kind = 13;
                  }
                  if ((0x1f000000000000L & l) != 0L)
                  {
                     if (kind > 12)
                        kind = 12;
                  }
                  break;
               case 0:
                  if ((0x3ff000000000000L & l) != 0L)
                  {
                     if (kind > 12)
                        kind = 12;
                     jjCheckNAdd(82);
                  }
                  else if ((0x100000200L & l) != 0L)
                  {
                     if (kind > 21)
                        kind = 21;
                  }
                  else if (curChar == 58)
                     jjstateSet[jjnewStateCnt++] = 3;
                  if ((0x1f000000000000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 13;
                  else if (curChar == 53)
                     jjstateSet[jjnewStateCnt++] = 15;
                  if ((0x3e000000000000L & l) != 0L)
                  {
                     if (kind > 15)
                        kind = 15;
                  }
                  else if (curChar == 48)
                     jjCheckNAddTwoStates(84, 85);
                  if ((0x7000000000000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 11;
                  else if (curChar == 51)
                     jjCheckNAddTwoStates(85, 94);
                  else if (curChar == 52)
                     jjstateSet[jjnewStateCnt++] = 1;
                  if (curChar == 50)
                     jjAddStates(0, 3);
                  else if (curChar == 49)
                     jjCheckNAddTwoStates(84, 85);
                  if (curChar == 49)
                     jjstateSet[jjnewStateCnt++] = 6;
                  break;
               case 92:
                  if ((0x3ff000000000000L & l) != 0L)
                  {
                     if (kind > 19)
                        kind = 19;
                     jjCheckNAdd(82);
                  }
                  if ((0x3ff000000000000L & l) != 0L)
                     jjCheckNAdd(8);
                  break;
               case 1:
                  if ((0x1ff000000000000L & l) != 0L && kind > 13)
                     kind = 13;
                  break;
               case 2:
                  if (curChar == 58)
                     jjstateSet[jjnewStateCnt++] = 3;
                  break;
               case 3:
                  if ((0x3f000000000000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 4;
                  break;
               case 4:
                  if ((0x3ff000000000000L & l) != 0L && kind > 14)
                     kind = 14;
                  break;
               case 5:
                  if ((0x3e000000000000L & l) != 0L && kind > 15)
                     kind = 15;
                  break;
               case 6:
                  if (curChar == 57)
                     jjstateSet[jjnewStateCnt++] = 7;
                  break;
               case 7:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjCheckNAdd(8);
                  break;
               case 8:
                  if ((0x3ff000000000000L & l) != 0L && kind > 16)
                     kind = 16;
                  break;
               case 9:
                  if (curChar == 49)
                     jjstateSet[jjnewStateCnt++] = 6;
                  break;
               case 10:
                  if ((0x7000000000000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 11;
                  break;
               case 11:
                  if ((0x3ff000000000000L & l) != 0L && kind > 17)
                     kind = 17;
                  break;
               case 12:
                  if ((0x1f000000000000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 13;
                  break;
               case 13:
                  if ((0x3ff000000000000L & l) != 0L && kind > 18)
                     kind = 18;
                  break;
               case 14:
                  if (curChar == 53)
                     jjstateSet[jjnewStateCnt++] = 15;
                  break;
               case 15:
                  if ((0x1f000000000000L & l) != 0L && kind > 18)
                     kind = 18;
                  break;
               case 16:
                  if ((0x100000200L & l) != 0L)
                     kind = 21;
                  break;
               case 81:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 12)
                     kind = 12;
                  jjCheckNAdd(82);
                  break;
               case 82:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 19)
                     kind = 19;
                  jjCheckNAdd(82);
                  break;
               case 83:
                  if (curChar == 48)
                     jjCheckNAddTwoStates(84, 85);
                  break;
               case 84:
                  if ((0x3ff000000000000L & l) != 0L && kind > 12)
                     kind = 12;
                  break;
               case 85:
                  if ((0x3ff000000000000L & l) != 0L && kind > 13)
                     kind = 13;
                  break;
               case 86:
                  if (curChar == 49)
                     jjCheckNAddTwoStates(84, 85);
                  break;
               case 87:
                  if (curChar == 50)
                     jjAddStates(0, 3);
                  break;
               case 89:
                  if ((0x3e0000000000000L & l) != 0L && kind > 13)
                     kind = 13;
                  break;
               case 90:
                  if ((0x1f000000000000L & l) != 0L && kind > 13)
                     kind = 13;
                  break;
               case 91:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 92;
                  break;
               case 93:
                  if (curChar == 51)
                     jjCheckNAddTwoStates(85, 94);
                  break;
               case 94:
                  if ((0x3000000000000L & l) != 0L && kind > 17)
                     kind = 17;
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      else if (curChar < 128)
      {
         long l = 1L << (curChar & 077);
         do
         {
            switch(jjstateSet[--i])
            {
               case 54:
                  if (curChar == 117)
                     jjstateSet[jjnewStateCnt++] = 58;
                  if (curChar == 117)
                     jjstateSet[jjnewStateCnt++] = 53;
                  break;
               case 0:
                  if (curChar == 83)
                     jjCheckNAddStates(4, 7);
                  else if (curChar == 70)
                     jjAddStates(8, 9);
                  else if (curChar == 77)
                     jjAddStates(10, 12);
                  else if (curChar == 84)
                     jjCheckNAddTwoStates(79, 80);
                  else if (curChar == 65)
                     jjAddStates(13, 14);
                  else if (curChar == 74)
                     jjAddStates(15, 17);
                  else if (curChar == 100)
                     jjAddStates(18, 19);
                  else if (curChar == 115)
                     jjAddStates(20, 21);
                  else if (curChar == 111)
                     jjAddStates(22, 23);
                  else if (curChar == 117)
                     jjstateSet[jjnewStateCnt++] = 41;
                  else if (curChar == 99)
                     jjstateSet[jjnewStateCnt++] = 34;
                  else if (curChar == 80)
                     jjCheckNAdd(28);
                  else if (curChar == 68)
                     jjstateSet[jjnewStateCnt++] = 26;
                  else if (curChar == 78)
                     jjstateSet[jjnewStateCnt++] = 23;
                  else if (curChar == 79)
                     jjstateSet[jjnewStateCnt++] = 20;
                  else if (curChar == 87)
                     jjstateSet[jjnewStateCnt++] = 17;
                  break;
               case 63:
                  if (curChar == 117)
                     jjstateSet[jjnewStateCnt++] = 65;
                  else if (curChar == 97)
                     jjstateSet[jjnewStateCnt++] = 62;
                  break;
               case 17:
                  if (curChar == 101 && kind > 24)
                     kind = 24;
                  break;
               case 18:
                  if (curChar == 87)
                     jjstateSet[jjnewStateCnt++] = 17;
                  break;
               case 19:
                  if (curChar == 116 && kind > 25)
                     kind = 25;
                  break;
               case 20:
                  if (curChar == 99)
                     jjstateSet[jjnewStateCnt++] = 19;
                  break;
               case 21:
                  if (curChar == 79)
                     jjstateSet[jjnewStateCnt++] = 20;
                  break;
               case 22:
                  if (curChar == 118)
                     kind = 25;
                  break;
               case 23:
                  if (curChar == 111)
                     jjstateSet[jjnewStateCnt++] = 22;
                  break;
               case 24:
                  if (curChar == 78)
                     jjstateSet[jjnewStateCnt++] = 23;
                  break;
               case 25:
                  if (curChar == 99 && kind > 25)
                     kind = 25;
                  break;
               case 26:
                  if (curChar == 101)
                     jjstateSet[jjnewStateCnt++] = 25;
                  break;
               case 27:
                  if (curChar == 68)
                     jjstateSet[jjnewStateCnt++] = 26;
                  break;
               case 28:
                  if (curChar == 72)
                     kind = 26;
                  break;
               case 29:
                  if (curChar == 80)
                     jjCheckNAdd(28);
                  break;
               case 30:
                  if (curChar == 100 && kind > 29)
                     kind = 29;
                  break;
               case 31:
                  if (curChar == 101)
                     jjstateSet[jjnewStateCnt++] = 30;
                  break;
               case 32:
                  if (curChar == 115)
                     jjstateSet[jjnewStateCnt++] = 31;
                  break;
               case 33:
                  if (curChar == 111)
                     jjstateSet[jjnewStateCnt++] = 32;
                  break;
               case 34:
                  if (curChar == 108)
                     jjstateSet[jjnewStateCnt++] = 33;
                  break;
               case 35:
                  if (curChar == 99)
                     jjstateSet[jjnewStateCnt++] = 34;
                  break;
               case 36:
                  if (curChar == 110 && kind > 29)
                     kind = 29;
                  break;
               case 37:
                  if (curChar == 119)
                     jjCheckNAdd(36);
                  break;
               case 38:
                  if (curChar == 111)
                     jjstateSet[jjnewStateCnt++] = 37;
                  break;
               case 39:
                  if (curChar == 110)
                     jjstateSet[jjnewStateCnt++] = 38;
                  break;
               case 40:
                  if (curChar == 107)
                     jjstateSet[jjnewStateCnt++] = 39;
                  break;
               case 41:
                  if (curChar == 110)
                     jjstateSet[jjnewStateCnt++] = 40;
                  break;
               case 42:
                  if (curChar == 117)
                     jjstateSet[jjnewStateCnt++] = 41;
                  break;
               case 43:
                  if (curChar == 111)
                     jjAddStates(22, 23);
                  break;
               case 44:
                  if (curChar == 101)
                     jjCheckNAdd(36);
                  break;
               case 45:
                  if (curChar == 112)
                     jjstateSet[jjnewStateCnt++] = 44;
                  break;
               case 46:
                  if (curChar == 102 && kind > 29)
                     kind = 29;
                  break;
               case 47:
                  if (curChar == 102)
                     jjstateSet[jjnewStateCnt++] = 46;
                  break;
               case 48:
                  if (curChar == 115)
                     jjAddStates(20, 21);
                  break;
               case 49:
                  if (curChar == 101 && kind > 27)
                     kind = 27;
                  break;
               case 50:
                  if (curChar == 115)
                     jjstateSet[jjnewStateCnt++] = 49;
                  break;
               case 51:
                  if (curChar == 105)
                     jjstateSet[jjnewStateCnt++] = 50;
                  break;
               case 52:
                  if (curChar == 114)
                     jjstateSet[jjnewStateCnt++] = 51;
                  break;
               case 53:
                  if (curChar == 110)
                     jjstateSet[jjnewStateCnt++] = 52;
                  break;
               case 55:
                  if (curChar == 116 && kind > 27)
                     kind = 27;
                  break;
               case 56:
                  if (curChar == 101)
                     jjstateSet[jjnewStateCnt++] = 55;
                  break;
               case 57:
                  if (curChar == 115)
                     jjstateSet[jjnewStateCnt++] = 56;
                  break;
               case 58:
                  if (curChar == 110)
                     jjstateSet[jjnewStateCnt++] = 57;
                  break;
               case 59:
                  if (curChar == 117)
                     jjstateSet[jjnewStateCnt++] = 58;
                  break;
               case 60:
                  if (curChar == 100)
                     jjAddStates(18, 19);
                  break;
               case 61:
                  if (curChar == 110 && kind > 27)
                     kind = 27;
                  break;
               case 62:
                  if (curChar == 119)
                     jjstateSet[jjnewStateCnt++] = 61;
                  break;
               case 64:
                  if (curChar == 107 && kind > 27)
                     kind = 27;
                  break;
               case 65:
                  if (curChar == 115)
                     jjstateSet[jjnewStateCnt++] = 64;
                  break;
               case 66:
                  if (curChar == 117)
                     jjstateSet[jjnewStateCnt++] = 65;
                  break;
               case 67:
                  if (curChar == 74)
                     jjAddStates(15, 17);
                  break;
               case 68:
                  if (curChar == 110 && kind > 25)
                     kind = 25;
                  break;
               case 69:
                  if (curChar == 97)
                     jjCheckNAdd(68);
                  break;
               case 70:
                  if (curChar == 117)
                     jjCheckNAdd(68);
                  break;
               case 71:
                  if (curChar == 108 && kind > 25)
                     kind = 25;
                  break;
               case 72:
                  if (curChar == 117)
                     jjstateSet[jjnewStateCnt++] = 71;
                  break;
               case 73:
                  if (curChar == 65)
                     jjAddStates(13, 14);
                  break;
               case 74:
                  if (curChar == 114 && kind > 25)
                     kind = 25;
                  break;
               case 75:
                  if (curChar == 112)
                     jjCheckNAdd(74);
                  break;
               case 76:
                  if (curChar == 103)
                     kind = 25;
                  break;
               case 77:
                  if (curChar == 117)
                     jjstateSet[jjnewStateCnt++] = 76;
                  break;
               case 78:
                  if (curChar == 84)
                     jjCheckNAddTwoStates(79, 80);
                  break;
               case 79:
                  if (curChar == 117 && kind > 24)
                     kind = 24;
                  break;
               case 80:
                  if (curChar == 104)
                     kind = 24;
                  break;
               case 95:
                  if (curChar == 77)
                     jjAddStates(10, 12);
                  break;
               case 96:
                  if (curChar == 111 && kind > 24)
                     kind = 24;
                  break;
               case 97:
                  if (curChar == 97)
                     jjCheckNAdd(74);
                  break;
               case 98:
                  if (curChar == 121)
                     kind = 25;
                  break;
               case 99:
                  if (curChar == 97)
                     jjstateSet[jjnewStateCnt++] = 98;
                  break;
               case 100:
                  if (curChar == 70)
                     jjAddStates(8, 9);
                  break;
               case 101:
                  if (curChar == 114 && kind > 24)
                     kind = 24;
                  break;
               case 102:
                  if (curChar == 98)
                     kind = 25;
                  break;
               case 103:
                  if (curChar == 101)
                     jjstateSet[jjnewStateCnt++] = 102;
                  break;
               case 104:
                  if (curChar == 83)
                     jjCheckNAddStates(4, 7);
                  break;
               case 105:
                  if (curChar == 97 && kind > 24)
                     kind = 24;
                  break;
               case 106:
                  if (curChar == 112 && kind > 25)
                     kind = 25;
                  break;
               case 107:
                  if (curChar == 101)
                     jjstateSet[jjnewStateCnt++] = 106;
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      else
      {
         int i2 = (curChar & 0xff) >> 6;
         long l2 = 1L << (curChar & 077);
         do
         {
            switch(jjstateSet[--i])
            {
               default : break;
            }
         } while(i != startsAt);
      }
      if (kind != 0x7fffffff)
      {
         jjmatchedKind = kind;
         jjmatchedPos = curPos;
         kind = 0x7fffffff;
      }
      ++curPos;
      if (jjmatchedKind != 0 && jjmatchedKind != 0x7fffffff)
         debugStream.println("   Currently matched the first " + (jjmatchedPos + 1) + " characters as a " + tokenImage[jjmatchedKind] + " token.");
      if ((i = jjnewStateCnt) == (startsAt = 108 - (jjnewStateCnt = startsAt)))
         return curPos;
      debugStream.println("   Possible kinds of longer matches : " + jjKindsForStateVector(curLexState, jjstateSet, startsAt, i));
      try { curChar = input_stream.readChar(); }
      catch(java.io.IOException e) { return curPos; }
      debugStream.println("<" + lexStateNames[curLexState] + ">" + "Current character : " + TokenMgrError.addEscapes(String.valueOf(curChar)) + " (" + (int)curChar + ") at line " + input_stream.getEndLine() + " column " + input_stream.getEndColumn());
   }
}
static private int jjMoveStringLiteralDfa0_1()
{
   return jjMoveNfa_1(0, 0);
}
static final long[] jjbitVec0 = {
   0x0L, 0x0L, 0xffffffffffffffffL, 0xffffffffffffffffL
};
static private int jjMoveNfa_1(int startState, int curPos)
{
   int startsAt = 0;
   jjnewStateCnt = 2;
   int i = 1;
   jjstateSet[0] = startState;
      debugStream.println("   Starting NFA to match one of : " + jjKindsForStateVector(curLexState, jjstateSet, 0, 1));
      debugStream.println("<" + lexStateNames[curLexState] + ">" + "Current character : " + TokenMgrError.addEscapes(String.valueOf(curChar)) + " (" + (int)curChar + ") at line " + input_stream.getEndLine() + " column " + input_stream.getEndColumn());
   int kind = 0x7fffffff;
   for (;;)
   {
      if (++jjround == 0x7fffffff)
         ReInitRounds();
      if (curChar < 64)
      {
         long l = 1L << curChar;
         do
         {
            switch(jjstateSet[--i])
            {
               case 0:
                  if ((0xfffffffbffffffffL & l) != 0L)
                  {
                     if (kind > 11)
                        kind = 11;
                  }
                  else if (curChar == 34)
                  {
                     if (kind > 10)
                        kind = 10;
                  }
                  break;
               case 1:
                  if ((0xfffffffbffffffffL & l) != 0L)
                     kind = 11;
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      else if (curChar < 128)
      {
         long l = 1L << (curChar & 077);
         do
         {
            switch(jjstateSet[--i])
            {
               case 0:
                  kind = 11;
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      else
      {
         int i2 = (curChar & 0xff) >> 6;
         long l2 = 1L << (curChar & 077);
         do
         {
            switch(jjstateSet[--i])
            {
               case 0:
                  if ((jjbitVec0[i2] & l2) != 0L && kind > 11)
                     kind = 11;
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      if (kind != 0x7fffffff)
      {
         jjmatchedKind = kind;
         jjmatchedPos = curPos;
         kind = 0x7fffffff;
      }
      ++curPos;
      if (jjmatchedKind != 0 && jjmatchedKind != 0x7fffffff)
         debugStream.println("   Currently matched the first " + (jjmatchedPos + 1) + " characters as a " + tokenImage[jjmatchedKind] + " token.");
      if ((i = jjnewStateCnt) == (startsAt = 2 - (jjnewStateCnt = startsAt)))
         return curPos;
      debugStream.println("   Possible kinds of longer matches : " + jjKindsForStateVector(curLexState, jjstateSet, startsAt, i));
      try { curChar = input_stream.readChar(); }
      catch(java.io.IOException e) { return curPos; }
      debugStream.println("<" + lexStateNames[curLexState] + ">" + "Current character : " + TokenMgrError.addEscapes(String.valueOf(curChar)) + " (" + (int)curChar + ") at line " + input_stream.getEndLine() + " column " + input_stream.getEndColumn());
   }
}
static final int[] jjnextStates = {
   88, 89, 90, 91, 105, 79, 107, 28, 101, 103, 96, 97, 99, 75, 77, 69, 
   70, 72, 63, 66, 54, 59, 45, 47, 
};

/** Token literal values. */
public static final String[] jjstrLiteralImages = {
"", null, null, "\54", "\73", "\72", "\53", "\55", "\57", null, null, null, 
null, null, null, null, null, null, null, null, null, null, "\174\174", 
"\62\64\57\67", null, null, null, null, "\145\141\163\164\145\162", null, "\50", "\51", 
"\133", "\135", "\144\141\171", "\163", "\167\145\145\153", };

/** Lexer state names. */
public static final String[] lexStateNames = {
   "DEFAULT",
   "COMMENT_STATE",
};

/** Lex State array. */
public static final int[] jjnewLexState = {
   -1, -1, -1, -1, -1, -1, -1, -1, -1, 1, 0, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
   -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
};
static final long[] jjtoToken = {
   0x1ffffff5f9L, 
};
static final long[] jjtoSkip = {
   0x206L, 
};
static final long[] jjtoMore = {
   0x800L, 
};
static protected SimpleCharStream input_stream;
static private final int[] jjrounds = new int[108];
static private final int[] jjstateSet = new int[216];
static protected char curChar;
/** Constructor. */
public EG1TokenManager(SimpleCharStream stream){
   if (input_stream != null)
      throw new TokenMgrError("ERROR: Second call to constructor of static lexer. You must use ReInit() to initialize the static variables.", TokenMgrError.STATIC_LEXER_ERROR);
   input_stream = stream;
}

/** Constructor. */
public EG1TokenManager(SimpleCharStream stream, int lexState){
   this(stream);
   SwitchTo(lexState);
}

/** Reinitialise parser. */
static public void ReInit(SimpleCharStream stream)
{
   jjmatchedPos = jjnewStateCnt = 0;
   curLexState = defaultLexState;
   input_stream = stream;
   ReInitRounds();
}
static private void ReInitRounds()
{
   int i;
   jjround = 0x80000001;
   for (i = 108; i-- > 0;)
      jjrounds[i] = 0x80000000;
}

/** Reinitialise parser. */
static public void ReInit(SimpleCharStream stream, int lexState)
{
   ReInit(stream);
   SwitchTo(lexState);
}

/** Switch to specified lex state. */
static public void SwitchTo(int lexState)
{
   if (lexState >= 2 || lexState < 0)
      throw new TokenMgrError("Error: Ignoring invalid lexical state : " + lexState + ". State unchanged.", TokenMgrError.INVALID_LEXICAL_STATE);
   else
      curLexState = lexState;
}

static protected Token jjFillToken()
{
   final Token t;
   final String curTokenImage;
   final int beginLine;
   final int endLine;
   final int beginColumn;
   final int endColumn;
   String im = jjstrLiteralImages[jjmatchedKind];
   curTokenImage = (im == null) ? input_stream.GetImage() : im;
   beginLine = input_stream.getBeginLine();
   beginColumn = input_stream.getBeginColumn();
   endLine = input_stream.getEndLine();
   endColumn = input_stream.getEndColumn();
   t = Token.newToken(jjmatchedKind, curTokenImage);

   t.beginLine = beginLine;
   t.endLine = endLine;
   t.beginColumn = beginColumn;
   t.endColumn = endColumn;

   return t;
}

static int curLexState = 0;
static int defaultLexState = 0;
static int jjnewStateCnt;
static int jjround;
static int jjmatchedPos;
static int jjmatchedKind;

/** Get the next Token. */
public static Token getNextToken() 
{
  Token matchedToken;
  int curPos = 0;

  EOFLoop :
  for (;;)
  {
   try
   {
      curChar = input_stream.BeginToken();
   }
   catch(java.io.IOException e)
   {
      debugStream.println("Returning the <EOF> token.");
      jjmatchedKind = 0;
      matchedToken = jjFillToken();
      return matchedToken;
   }

   for (;;)
   {
     switch(curLexState)
     {
       case 0:
         try { input_stream.backup(0);
            while (curChar <= 13 && (0x2400L & (1L << curChar)) != 0L)
         {
      debugStream.println("<" + lexStateNames[curLexState] + ">" + "Skipping character : " + TokenMgrError.addEscapes(String.valueOf(curChar)) + " (" + (int)curChar + ")");
               curChar = input_stream.BeginToken();
         }
         }
         catch (java.io.IOException e1) { continue EOFLoop; }
         jjmatchedKind = 0x7fffffff;
         jjmatchedPos = 0;
      debugStream.println("<" + lexStateNames[curLexState] + ">" + "Current character : " + TokenMgrError.addEscapes(String.valueOf(curChar)) + " (" + (int)curChar + ") at line " + input_stream.getEndLine() + " column " + input_stream.getEndColumn());
         curPos = jjMoveStringLiteralDfa0_0();
         break;
       case 1:
         jjmatchedKind = 0x7fffffff;
         jjmatchedPos = 0;
      debugStream.println("<" + lexStateNames[curLexState] + ">" + "Current character : " + TokenMgrError.addEscapes(String.valueOf(curChar)) + " (" + (int)curChar + ") at line " + input_stream.getEndLine() + " column " + input_stream.getEndColumn());
         curPos = jjMoveStringLiteralDfa0_1();
         break;
     }
     if (jjmatchedKind != 0x7fffffff)
     {
        if (jjmatchedPos + 1 < curPos)
        {
           debugStream.println("   Putting back " + (curPos - jjmatchedPos - 1) + " characters into the input stream.");
           input_stream.backup(curPos - jjmatchedPos - 1);
        }
    debugStream.println("****** FOUND A " + tokenImage[jjmatchedKind] + " MATCH (" + TokenMgrError.addEscapes(new String(input_stream.GetSuffix(jjmatchedPos + 1))) + ") ******\n");
        if ((jjtoToken[jjmatchedKind >> 6] & (1L << (jjmatchedKind & 077))) != 0L)
        {
           matchedToken = jjFillToken();
       if (jjnewLexState[jjmatchedKind] != -1)
         curLexState = jjnewLexState[jjmatchedKind];
           return matchedToken;
        }
        else if ((jjtoSkip[jjmatchedKind >> 6] & (1L << (jjmatchedKind & 077))) != 0L)
        {
         if (jjnewLexState[jjmatchedKind] != -1)
           curLexState = jjnewLexState[jjmatchedKind];
           continue EOFLoop;
        }
      if (jjnewLexState[jjmatchedKind] != -1)
        curLexState = jjnewLexState[jjmatchedKind];
        curPos = 0;
        jjmatchedKind = 0x7fffffff;
        try {
           curChar = input_stream.readChar();
   debugStream.println("<" + lexStateNames[curLexState] + ">" + "Current character : " + TokenMgrError.addEscapes(String.valueOf(curChar)) + " (" + (int)curChar + ") at line " + input_stream.getEndLine() + " column " + input_stream.getEndColumn());
           continue;
        }
        catch (java.io.IOException e1) { }
     }
     int error_line = input_stream.getEndLine();
     int error_column = input_stream.getEndColumn();
     String error_after = null;
     boolean EOFSeen = false;
     try { input_stream.readChar(); input_stream.backup(1); }
     catch (java.io.IOException e1) {
        EOFSeen = true;
        error_after = curPos <= 1 ? "" : input_stream.GetImage();
        if (curChar == '\n' || curChar == '\r') {
           error_line++;
           error_column = 0;
        }
        else
           error_column++;
     }
     if (!EOFSeen) {
        input_stream.backup(1);
        error_after = curPos <= 1 ? "" : input_stream.GetImage();
     }
     throw new TokenMgrError(EOFSeen, curLexState, error_line, error_column, error_after, curChar, TokenMgrError.LEXICAL_ERROR);
   }
  }
}

protected static final int[][][] statesForState = {
 {
   { 0, 2, 5, 9, 10, 12, 14, 16, 18, 21, 24, 27, 29, 35, 42, 43, 48, 60, 67, 73, 78, 81, 83, 86, 87, 93, 95, 100, 104, },
   { 1 },
   { 0, 2, 5, 9, 10, 12, 14, 16, 18, 21, 24, 27, 29, 35, 42, 43, 48, 60, 67, 73, 78, 81, 83, 86, 87, 93, 95, 100, 104, },
   { 3 },
   { 4 },
   { 0, 2, 5, 9, 10, 12, 14, 16, 18, 21, 24, 27, 29, 35, 42, 43, 48, 60, 67, 73, 78, 81, 83, 86, 87, 93, 95, 100, 104, },
   { 6 },
   { 7 },
   { 8 },
   { 0, 2, 5, 9, 10, 12, 14, 16, 18, 21, 24, 27, 29, 35, 42, 43, 48, 60, 67, 73, 78, 81, 83, 86, 87, 93, 95, 100, 104, },
   { 0, 2, 5, 9, 10, 12, 14, 16, 18, 21, 24, 27, 29, 35, 42, 43, 48, 60, 67, 73, 78, 81, 83, 86, 87, 93, 95, 100, 104, },
   { 88, 89, 90, 91, 11, 13, 82, },
   { 0, 2, 5, 9, 10, 12, 14, 16, 18, 21, 24, 27, 29, 35, 42, 43, 48, 60, 67, 73, 78, 81, 83, 86, 87, 93, 95, 100, 104, },
   { 88, 89, 90, 91, 11, 13, 82, },
   { 0, 2, 5, 9, 10, 12, 14, 16, 18, 21, 24, 27, 29, 35, 42, 43, 48, 60, 67, 73, 78, 81, 83, 86, 87, 93, 95, 100, 104, },
   { 15 },
   { 0, 2, 5, 9, 10, 12, 14, 16, 18, 21, 24, 27, 29, 35, 42, 43, 48, 60, 67, 73, 78, 81, 83, 86, 87, 93, 95, 100, 104, },
   { 17 },
   { 0, 2, 5, 9, 10, 12, 14, 16, 18, 21, 24, 27, 29, 35, 42, 43, 48, 60, 67, 73, 78, 81, 83, 86, 87, 93, 95, 100, 104, },
   { 19 },
   { 20 },
   { 0, 2, 5, 9, 10, 12, 14, 16, 18, 21, 24, 27, 29, 35, 42, 43, 48, 60, 67, 73, 78, 81, 83, 86, 87, 93, 95, 100, 104, },
   { 22 },
   { 23 },
   { 0, 2, 5, 9, 10, 12, 14, 16, 18, 21, 24, 27, 29, 35, 42, 43, 48, 60, 67, 73, 78, 81, 83, 86, 87, 93, 95, 100, 104, },
   { 25 },
   { 26 },
   { 0, 2, 5, 9, 10, 12, 14, 16, 18, 21, 24, 27, 29, 35, 42, 43, 48, 60, 67, 73, 78, 81, 83, 86, 87, 93, 95, 100, 104, },
   { 28 },
   { 0, 2, 5, 9, 10, 12, 14, 16, 18, 21, 24, 27, 29, 35, 42, 43, 48, 60, 67, 73, 78, 81, 83, 86, 87, 93, 95, 100, 104, },
   { 30 },
   { 31 },
   { 32 },
   { 33 },
   { 34 },
   { 0, 2, 5, 9, 10, 12, 14, 16, 18, 21, 24, 27, 29, 35, 42, 43, 48, 60, 67, 73, 78, 81, 83, 86, 87, 93, 95, 100, 104, },
   { 36 },
   { 37 },
   { 38 },
   { 39 },
   { 40 },
   { 41 },
   { 0, 2, 5, 9, 10, 12, 14, 16, 18, 21, 24, 27, 29, 35, 42, 43, 48, 60, 67, 73, 78, 81, 83, 86, 87, 93, 95, 100, 104, },
   { 0, 2, 5, 9, 10, 12, 14, 16, 18, 21, 24, 27, 29, 35, 42, 43, 48, 60, 67, 73, 78, 81, 83, 86, 87, 93, 95, 100, 104, },
   { 44 },
   { 45 },
   { 46 },
   { 47 },
   { 0, 2, 5, 9, 10, 12, 14, 16, 18, 21, 24, 27, 29, 35, 42, 43, 48, 60, 67, 73, 78, 81, 83, 86, 87, 93, 95, 100, 104, },
   { 49 },
   { 50 },
   { 51 },
   { 52 },
   { 53 },
   { 54, 59, },
   { 55 },
   { 56 },
   { 57 },
   { 58 },
   { 54, 59, },
   { 0, 2, 5, 9, 10, 12, 14, 16, 18, 21, 24, 27, 29, 35, 42, 43, 48, 60, 67, 73, 78, 81, 83, 86, 87, 93, 95, 100, 104, },
   { 61 },
   { 62 },
   { 63, 66, },
   { 64 },
   { 65 },
   { 63, 66, },
   { 0, 2, 5, 9, 10, 12, 14, 16, 18, 21, 24, 27, 29, 35, 42, 43, 48, 60, 67, 73, 78, 81, 83, 86, 87, 93, 95, 100, 104, },
   { 68 },
   { 69 },
   { 70 },
   { 71 },
   { 72 },
   { 0, 2, 5, 9, 10, 12, 14, 16, 18, 21, 24, 27, 29, 35, 42, 43, 48, 60, 67, 73, 78, 81, 83, 86, 87, 93, 95, 100, 104, },
   { 74 },
   { 75 },
   { 76 },
   { 77 },
   { 0, 2, 5, 9, 10, 12, 14, 16, 18, 21, 24, 27, 29, 35, 42, 43, 48, 60, 67, 73, 78, 81, 83, 86, 87, 93, 95, 100, 104, },
   { 79 },
   { 80 },
   { 0, 2, 5, 9, 10, 12, 14, 16, 18, 21, 24, 27, 29, 35, 42, 43, 48, 60, 67, 73, 78, 81, 83, 86, 87, 93, 95, 100, 104, },
   { 92, 82, },
   { 0, 2, 5, 9, 10, 12, 14, 16, 18, 21, 24, 27, 29, 35, 42, 43, 48, 60, 67, 73, 78, 81, 83, 86, 87, 93, 95, 100, 104, },
   { 84 },
   { 85 },
   { 0, 2, 5, 9, 10, 12, 14, 16, 18, 21, 24, 27, 29, 35, 42, 43, 48, 60, 67, 73, 78, 81, 83, 86, 87, 93, 95, 100, 104, },
   { 0, 2, 5, 9, 10, 12, 14, 16, 18, 21, 24, 27, 29, 35, 42, 43, 48, 60, 67, 73, 78, 81, 83, 86, 87, 93, 95, 100, 104, },
   { 88, 89, 90, 91, 11, 13, 82, },
   { 88, 89, 90, 91, 11, 13, 82, },
   { 88, 89, 90, 91, 11, 13, 82, },
   { 88, 89, 90, 91, 11, 13, 82, },
   { 92, 82, },
   { 0, 2, 5, 9, 10, 12, 14, 16, 18, 21, 24, 27, 29, 35, 42, 43, 48, 60, 67, 73, 78, 81, 83, 86, 87, 93, 95, 100, 104, },
   { 94 },
   { 0, 2, 5, 9, 10, 12, 14, 16, 18, 21, 24, 27, 29, 35, 42, 43, 48, 60, 67, 73, 78, 81, 83, 86, 87, 93, 95, 100, 104, },
   { 96 },
   { 97 },
   { 98 },
   { 99 },
   { 0, 2, 5, 9, 10, 12, 14, 16, 18, 21, 24, 27, 29, 35, 42, 43, 48, 60, 67, 73, 78, 81, 83, 86, 87, 93, 95, 100, 104, },
   { 101 },
   { 102 },
   { 103 },
   { 0, 2, 5, 9, 10, 12, 14, 16, 18, 21, 24, 27, 29, 35, 42, 43, 48, 60, 67, 73, 78, 81, 83, 86, 87, 93, 95, 100, 104, },
   { 105 },
   { 106 },
   { 107 },
 },
 {
   { 0, 1, },
   { 0, 1, },
 },

};
protected static final int[][] kindForState = {
{ 13, 13, 14, 14, 14, 15, 16, 16, 16, 16, 17, 17, 18, 18,
  18, 18, 21, 24, 24, 25, 25, 25, 25, 25, 25, 25, 25, 25, 26,
  26, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29,
  29, 29, 29, 29, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27,
  27, 27, 27, 27, 27, 27, 27, 27, 25, 25, 25, 25, 25, 25, 25,
  25, 25, 25, 25, 24, 24, 24, 12, 19, 12, 12, 13, 12, 12, 12,
  13, 13, 16, 16, 13, 17, 24, 24, 25, 25, 25, 24, 24, 25, 25,
  25, 24, 25, 25},
{ 10, 11}
};
  static  int kindCnt = 0;
  protected static  final String jjKindsForBitVector(int i, long vec)
  {
    String retVal = "";
    if (i == 0)
       kindCnt = 0;
    for (int j = 0; j < 64; j++)
    {
       if ((vec & (1L << j)) != 0L)
       {
          if (kindCnt++ > 0)
             retVal += ", ";
          if (kindCnt % 5 == 0)
             retVal += "\n     ";
          retVal += tokenImage[i * 64 + j];
       }
    }
    return retVal;
  }

  protected static  final String jjKindsForStateVector(int lexState, int[] vec, int start, int end)
  {
    boolean[] kindDone = new boolean[37];
    String retVal = "";
    int cnt = 0;
    for (int i = start; i < end; i++)
    {
     if (vec[i] == -1)
       continue;
     int[] stateSet = statesForState[curLexState][vec[i]];
     for (int j = 0; j < stateSet.length; j++)
     {
       int state = stateSet[j];
       if (!kindDone[kindForState[lexState][state]])
       {
          kindDone[kindForState[lexState][state]] = true;
          if (cnt++ > 0)
             retVal += ", ";
          if (cnt % 5 == 0)
             retVal += "\n     ";
          retVal += tokenImage[kindForState[lexState][state]];
       }
     }
    }
    if (cnt == 0)
       return "{  }";
    else
       return "{ " + retVal + " }";
  }

static private void jjCheckNAdd(int state)
{
   if (jjrounds[state] != jjround)
   {
      jjstateSet[jjnewStateCnt++] = state;
      jjrounds[state] = jjround;
   }
}
static private void jjAddStates(int start, int end)
{
   do {
      jjstateSet[jjnewStateCnt++] = jjnextStates[start];
   } while (start++ != end);
}
static private void jjCheckNAddTwoStates(int state1, int state2)
{
   jjCheckNAdd(state1);
   jjCheckNAdd(state2);
}

static private void jjCheckNAddStates(int start, int end)
{
   do {
      jjCheckNAdd(jjnextStates[start]);
   } while (start++ != end);
}

}
