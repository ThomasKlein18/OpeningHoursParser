/* Generated By:JavaCC: Do not edit this line. EG1.java */
import java.util.ArrayList;
import java.util.Collections;
import java.io.ByteArrayInputStream;

public class EG1 implements EG1Constants {
  public static void main(String args []) throws ParseException
  {
    // String str = "1 02:00; 2014 Mar Th[1] ; 2014 Jan 25 03:00;";

   //  String str = "12:01-13:02, 14:00 , 10:00-sunset , 11:01-45:00/45 ; 12-16 closed  ; Mo, We 12:01-13:02 ; Apr-Sep Tu-Th,Fr 10:01-13:03, Dec 13:03-21:01 ; week 01-22 10:11-14:14 ; 2014 Jan 2 03:00;";
    // String str = "12:01-13:02, 14:00 , 10:00-sunset , 11:01-45:00/46 ; 12-16 closed \"ein test\" ; Mo, We 12:01-13:02 ; Apr-Sep 10:01-13:03, Dec 13:03-21:01";
    String str = "closed \u005c"ein test\u005c" ;";

    EG1 parser = new EG1(new ByteArrayInputStream(str.getBytes()));
    ArrayList<Rule> rules = parser.rules();
    for (Rule rl:rules)
        {
          System.out.println(rl.toString());
        }
  }

  static final public String comment() throws ParseException {
    trace_call("comment");
    try {
        Token r = null;
      r = jj_consume_token(ENDQUOTE);
    System.out.println(">"+r.image+"< ");
    {if (true) return r.image;}
    throw new Error("Missing return statement in function");
    } finally {
      trace_return("comment");
    }
  }

  static final public int time() throws ParseException {
    trace_call("time");
    try {
  Token h = null;
  Token m = null;
  int result = 0;
      h = jj_consume_token(HOUR);
      if (jj_2_1(10)) {
        m = jj_consume_token(MINUTES);
    result = Integer.parseInt(m.image.substring(1));
      } else {
        ;
      }
    result = result + Integer.parseInt(h.image) * 60;
        {if (true) return result;}
    throw new Error("Missing return statement in function");
    } finally {
      trace_return("time");
    }
  }

  static final public int extendedtime() throws ParseException {
    trace_call("extendedtime");
    try {
  Token h = null;
  Token m = null;
  int result = 0;
      if (jj_2_2(10)) {
        h = jj_consume_token(EXTENDEDHOUR);
      } else if (jj_2_3(10)) {
        h = jj_consume_token(HOUR);
      } else {
        jj_consume_token(-1);
        throw new ParseException();
      }
      if (jj_2_4(10)) {
        m = jj_consume_token(MINUTES);
      result = Integer.parseInt(m.image.substring(1));
      } else {
        ;
      }
    result = result + Integer.parseInt(h.image) * 60;
        {if (true) return result;}
    throw new Error("Missing return statement in function");
    } finally {
      trace_return("extendedtime");
    }
  }

  static final public VariableTime variabletime() throws ParseException {
    trace_call("variabletime");
    try {
        Token event = null;
        Token sign = null;
        int offset = 0;
        VariableTime vt = new VariableTime();
      if (jj_2_7(10)) {
        event = jj_consume_token(EVENTS);
          vt.event =  event.image;
          {if (true) return vt;}
      } else if (jj_2_8(10)) {
        jj_consume_token(30);
        event = jj_consume_token(EVENTS);
        if (jj_2_5(10)) {
          sign = jj_consume_token(PLUS);
        } else if (jj_2_6(10)) {
          sign = jj_consume_token(HYPHEN);
        } else {
          jj_consume_token(-1);
          throw new ParseException();
        }
        offset = time();
        jj_consume_token(31);
          vt.event =  event.image;
          vt.offset = (sign.image.equals("-") ? -1 : 1) * offset;
        {if (true) return vt;}
      } else {
        jj_consume_token(-1);
        throw new ParseException();
      }
    throw new Error("Missing return statement in function");
    } finally {
      trace_return("variabletime");
    }
  }

  static final public int interval() throws ParseException {
    trace_call("interval");
    try {
  Token minutes = null;
  Token hours = null;
  int interval = 0;
      jj_consume_token(SLASH);
      if (jj_2_12(10)) {
        if (jj_2_9(10)) {
          minutes = jj_consume_token(HOUR);
        } else if (jj_2_10(10)) {
          minutes = jj_consume_token(EXTENDEDHOUR);
        } else if (jj_2_11(10)) {
          minutes = jj_consume_token(NUMBER);
        } else {
          jj_consume_token(-1);
          throw new ParseException();
        }
            interval = Integer.parseInt(minutes.image);
      } else if (jj_2_13(10)) {
        hours = jj_consume_token(HOUR);
        minutes = jj_consume_token(MINUTES);
            interval = Integer.parseInt(hours.image)*60 + Integer.parseInt(minutes.image.substring(1));
      } else {
        jj_consume_token(-1);
        throw new ParseException();
      }
        {if (true) return interval;}
    throw new Error("Missing return statement in function");
    } finally {
      trace_return("interval");
    }
  }

  static final public TimeSpan timespan() throws ParseException {
    trace_call("timespan");
    try {
  int start = 0;
  int end = -1;
  Token startplus = null;
  Token endplus = null;
  VariableTime startVT = null;
  VariableTime endVT = null;
  TimeSpan ts =new TimeSpan();
  int inter = 0;
      if (jj_2_24(10)) {
        if (jj_2_14(10)) {
          start = time();
                ts.start = start;
        } else if (jj_2_15(10)) {
          startVT = variabletime();
                ts.startEvent = startVT;
        } else {
          jj_consume_token(-1);
          throw new ParseException();
        }
        if (jj_2_23(10)) {
          if (jj_2_21(10)) {
            startplus = jj_consume_token(PLUS);
          } else if (jj_2_22(10)) {
            jj_consume_token(HYPHEN);
            if (jj_2_16(10)) {
              end = extendedtime();
        ts.end = end;
            } else if (jj_2_17(10)) {
              endVT = variabletime();
        ts.endEvent = endVT;
            } else {
              jj_consume_token(-1);
              throw new ParseException();
            }
            if (jj_2_20(10)) {
              if (jj_2_18(10)) {
                endplus = jj_consume_token(PLUS);
              } else if (jj_2_19(10)) {
                inter = interval();
        ts.interval = inter;
              } else {
                jj_consume_token(-1);
                throw new ParseException();
              }
            } else {
              ;
            }
          } else {
            jj_consume_token(-1);
            throw new ParseException();
          }
        } else {
          ;
        }
          ts.openEnded = startplus != null || endplus != null;
      {if (true) return ts;}
      } else if (jj_2_25(10)) {
        jj_consume_token(ALWAYS);
                ts.twentyfourseven = true;
                {if (true) return ts;}
      } else {
        jj_consume_token(-1);
        throw new ParseException();
      }
    throw new Error("Missing return statement in function");
    } finally {
      trace_return("timespan");
    }
  }

  static final public ArrayList<TimeSpan> time_selector() throws ParseException {
    trace_call("time_selector");
    try {
  TimeSpan ts,ts1;
  ArrayList<TimeSpan> result = new ArrayList<TimeSpan>();
      ts = timespan();
      label_1:
      while (true) {
        if (jj_2_26(10)) {
          ;
        } else {
          break label_1;
        }
        label_2:
        while (true) {
          if (jj_2_27(10)) {
            ;
          } else {
            break label_2;
          }
          jj_consume_token(WS);
        }
        jj_consume_token(COMMA);
        label_3:
        while (true) {
          if (jj_2_28(10)) {
            ;
          } else {
            break label_3;
          }
          jj_consume_token(WS);
        }
        ts1 = timespan();
        result.add(0,ts1);
      }
    result.add(ts);
    Collections.reverse(result);
    {if (true) return result;}
    throw new Error("Missing return statement in function");
    } finally {
      trace_return("time_selector");
    }
  }

  static final public String weekday() throws ParseException {
    trace_call("weekday");
    try {
  Token w = null;
      w = jj_consume_token(WEEKDAY);
   {if (true) return w.image;}
    throw new Error("Missing return statement in function");
    } finally {
      trace_return("weekday");
    }
  }

  static final public WeekDayRange weekday_range() throws ParseException {
    trace_call("weekday_range");
    try {
        String startDay = null;
        String endDay = null;
        Nth nth = null;
        Nth nth1 = null;
        WeekDayRange wdr = new WeekDayRange();
      startDay = weekday();
      if (jj_2_29(10)) {
        jj_consume_token(HYPHEN);
        endDay = weekday();
    wdr.endDay = endDay;
      } else {
        ;
      }
        wdr.startDay = startDay;
        {if (true) return wdr;}
    throw new Error("Missing return statement in function");
    } finally {
      trace_return("weekday_range");
    }
  }

  static final public Nth nth() throws ParseException {
    trace_call("nth");
    try {
  Nth n = new Nth();
  Token t1 = null;
  Token t2 = null;
      if (jj_2_34(10)) {
        t1 = jj_consume_token(ONE2FIVE);
      n.startNth = Integer.parseInt(t1.image);
      } else {
        ;
      }
      if (jj_2_35(10)) {
        jj_consume_token(HYPHEN);
        t2 = jj_consume_token(ONE2FIVE);
      n.endNth = Integer.parseInt(t2.image);
      } else {
        ;
      }
                {if (true) return n;}
    throw new Error("Missing return statement in function");
    } finally {
      trace_return("nth");
    }
  }

  static final public ArrayList<WeekDayRange> weekday_selector() throws ParseException {
    trace_call("weekday_selector");
    try {
  WeekDayRange wdr,wdr1;
  ArrayList<WeekDayRange> result = new ArrayList<WeekDayRange>();
      wdr = weekday_range();
      label_7:
      while (true) {
        if (jj_2_36(10)) {
          ;
        } else {
          break label_7;
        }
        label_8:
        while (true) {
          if (jj_2_37(10)) {
            ;
          } else {
            break label_8;
          }
          jj_consume_token(WS);
        }
        jj_consume_token(COMMA);
        label_9:
        while (true) {
          if (jj_2_38(10)) {
            ;
          } else {
            break label_9;
          }
          jj_consume_token(WS);
        }
        wdr1 = weekday_range();
        result.add(0,wdr1);
      }
    result.add(wdr);
    Collections.reverse(result);
    {if (true) return result;}
    throw new Error("Missing return statement in function");
    } finally {
      trace_return("weekday_selector");
    }
  }

  static final public Holiday holiday() throws ParseException {
    trace_call("holiday");
    try {
  Token h = null;
  Token n = null;
  Token m = null;
  Holiday result = new Holiday();
      h = jj_consume_token(HOLIDAYS);
      if (jj_2_43(10)) {
        if (jj_2_39(10)) {
          m = jj_consume_token(HYPHEN);
        } else if (jj_2_40(10)) {
          jj_consume_token(PLUS);
        } else {
          jj_consume_token(-1);
          throw new ParseException();
        }
        n = jj_consume_token(NUMBER);
        if (jj_2_41(10)) {
          jj_consume_token(WS);
        } else {
          ;
        }
        jj_consume_token(34);
        if (jj_2_42(10)) {
          jj_consume_token(35);
        } else {
          ;
        }
      result.offset = Integer.parseInt(n.image);
      if (m!= null) {
                result.offset = result.offset*-1;
      }
      } else {
        ;
      }
    result.type = Holiday.Type.valueOf(h.image);
    {if (true) return result;}
    throw new Error("Missing return statement in function");
    } finally {
      trace_return("holiday");
    }
  }

  static final public ArrayList<Holiday> holiday_sequence() throws ParseException {
    trace_call("holiday_sequence");
    try {
  Holiday h = null;
  Holiday h1 = null;
  ArrayList<Holiday> result = new ArrayList<Holiday>();
      h = holiday();
      label_10:
      while (true) {
        if (jj_2_44(10)) {
          ;
        } else {
          break label_10;
        }
        label_11:
        while (true) {
          if (jj_2_45(10)) {
            ;
          } else {
            break label_11;
          }
          jj_consume_token(WS);
        }
        jj_consume_token(COMMA);
        label_12:
        while (true) {
          if (jj_2_46(10)) {
            ;
          } else {
            break label_12;
          }
          jj_consume_token(WS);
        }
        h1 = holiday();
        result.add(0,h1);
      }
    result.add(h);
    Collections.reverse(result);
    {if (true) return result;}
    throw new Error("Missing return statement in function");
    } finally {
      trace_return("holiday_sequence");
    }
  }

  static final public String month() throws ParseException {
    trace_call("month");
    try {
  Token m = null;
      m = jj_consume_token(MONTH);
        {if (true) return m.image;}
    throw new Error("Missing return statement in function");
    } finally {
      trace_return("month");
    }
  }

  static final public MonthDayRange monthday_range() throws ParseException {
    trace_call("monthday_range");
    try {
        Token nth = null;
        Token year = null;
        Token n = null;
        String startMonth = null;
        String endMonth = null;
        MonthDayRange mdr = new MonthDayRange();
        DateWithOffset startDate = null;
        DateWithOffset endDate = null;
        Token plus = null;
      startDate = datewithoffset();
      if (jj_2_47(10)) {
        plus = jj_consume_token(PLUS);
      } else {
        ;
      }
                  mdr.startDate = startDate;
                  startDate.openEnded = plus != null;
      if (jj_2_50(10)) {
        label_13:
        while (true) {
          if (jj_2_48(10)) {
            ;
          } else {
            break label_13;
          }
          jj_consume_token(WS);
        }
        jj_consume_token(HYPHEN);
        label_14:
        while (true) {
          if (jj_2_49(10)) {
            ;
          } else {
            break label_14;
          }
          jj_consume_token(WS);
        }
        endDate = datewithoffset();
                  mdr.endDate = endDate;
      } else {
        ;
      }
        {if (true) return mdr;}
    throw new Error("Missing return statement in function");
    } finally {
      trace_return("monthday_range");
    }
  }

  static final public int daynum() throws ParseException {
    trace_call("daynum");
    try {
        Token n = null;
      if (jj_2_51(10)) {
        n = jj_consume_token(HOUR);
      } else if (jj_2_52(10)) {
        n = jj_consume_token(DAYNUM);
      } else {
        jj_consume_token(-1);
        throw new ParseException();
      }
        {if (true) return Integer.parseInt(n.image);}
    throw new Error("Missing return statement in function");
    } finally {
      trace_return("daynum");
    }
  }

  static final public DateWithOffset datewithoffset() throws ParseException {
    trace_call("datewithoffset");
    try {
  DateWithOffset dwo = new DateWithOffset();
  Token y = null;
  Token m = null;
  Token d = null;
  Token h = null;
  Token n = null;
  Token v = null;
  Token minus = null;
  Token num = null;
  Token wd = null;
      if (jj_2_54(10)) {
        y = jj_consume_token(YEAR);
        label_15:
        while (true) {
          jj_consume_token(WS);
          if (jj_2_53(10)) {
            ;
          } else {
            break label_15;
          }
        }
                dwo.year = Integer.parseInt(y.image);
      } else {
        ;
      }
      if (jj_2_68(10)) {
        m = jj_consume_token(MONTH);
                      dwo.month = m.image;
      } else if (jj_2_69(10)) {
        if (jj_2_59(10)) {
          if (jj_2_56(10)) {
            m = jj_consume_token(MONTH);
            label_16:
            while (true) {
              jj_consume_token(WS);
              if (jj_2_55(10)) {
                ;
              } else {
                break label_16;
              }
            }
                                        dwo.month = m.image;
          } else {
            ;
          }
          dwo.day = daynum();
        } else if (jj_2_60(10)) {
          m = jj_consume_token(MONTH);
          label_17:
          while (true) {
            jj_consume_token(WS);
            if (jj_2_57(10)) {
              ;
            } else {
              break label_17;
            }
          }
          d = jj_consume_token(WEEKDAY);
          jj_consume_token(32);
          if (jj_2_58(10)) {
            h = jj_consume_token(HYPHEN);
          } else {
            ;
          }
          n = jj_consume_token(ONE2FIVE);
          jj_consume_token(33);
             dwo.month = m.image;
             dwo.weekDay = d.image;
             dwo.nth = Integer.parseInt(n.image);
             if (h!=null)
             {
                       dwo.nth = dwo.nth * -1;
             }
        } else if (jj_2_61(10)) {
          v = jj_consume_token(VARDATE);
                 dwo.varDate = v.image;
        } else {
          jj_consume_token(-1);
          throw new ParseException();
        }
        if (jj_2_64(10)) {
          if (jj_2_62(10)) {
            minus = jj_consume_token(HYPHEN);
          } else if (jj_2_63(10)) {
            jj_consume_token(PLUS);
          } else {
            jj_consume_token(-1);
            throw new ParseException();
          }
          wd = jj_consume_token(WEEKDAY);
             dwo.weekDayOffsetPositive = minus == null;
             dwo.weekDayOffset = wd.image;
        } else {
          ;
        }
        if (jj_2_67(10)) {
          if (jj_2_65(10)) {
            minus = jj_consume_token(HYPHEN);
          } else if (jj_2_66(10)) {
            jj_consume_token(PLUS);
          } else {
            jj_consume_token(-1);
            throw new ParseException();
          }
          num = jj_consume_token(NUMBER);
              dwo.dayOffset = Integer.parseInt(num.image) * (minus != null ? -1 : 1);
        } else {
          ;
        }
      } else {
        jj_consume_token(-1);
        throw new ParseException();
      }
    {if (true) return dwo;}
    throw new Error("Missing return statement in function");
    } finally {
      trace_return("datewithoffset");
    }
  }

  static final public ArrayList<MonthDayRange> monthday_selector() throws ParseException {
    trace_call("monthday_selector");
    try {
  MonthDayRange mdr,mdr1;
  ArrayList<MonthDayRange> result = new ArrayList<MonthDayRange>();
      mdr = monthday_range();
      label_18:
      while (true) {
        if (jj_2_70(10)) {
          ;
        } else {
          break label_18;
        }
        label_19:
        while (true) {
          if (jj_2_71(10)) {
            ;
          } else {
            break label_19;
          }
          jj_consume_token(WS);
        }
        jj_consume_token(COMMA);
        label_20:
        while (true) {
          if (jj_2_72(10)) {
            ;
          } else {
            break label_20;
          }
          jj_consume_token(WS);
        }
        mdr1 = monthday_range();
        result.add(0,mdr1);
      }
    result.add(mdr);
    Collections.reverse(result);
    {if (true) return result;}
    throw new Error("Missing return statement in function");
    } finally {
      trace_return("monthday_selector");
    }
  }

  static final public int weeknum() throws ParseException {
    trace_call("weeknum");
    try {
        Token n = null;
      if (jj_2_73(10)) {
        n = jj_consume_token(HOUR);
      } else if (jj_2_74(10)) {
        n = jj_consume_token(EXTENDEDHOUR);
      } else if (jj_2_75(10)) {
        n = jj_consume_token(WEEKNUM);
      } else {
        jj_consume_token(-1);
        throw new ParseException();
      }
        {if (true) return Integer.parseInt(n.image);}
    throw new Error("Missing return statement in function");
    } finally {
      trace_return("weeknum");
    }
  }

  static final public WeekRange week_range() throws ParseException {
    trace_call("week_range");
    try {
        WeekRange wr = new WeekRange();
        Token w = null;
        Token w1 = null;
        Token i = null;
      wr.startWeek = weeknum();
      if (jj_2_77(10)) {
        jj_consume_token(HYPHEN);
        wr.endWeek = weeknum();
        if (jj_2_76(10)) {
          wr.interval = interval();
        } else {
          ;
        }
      } else {
        ;
      }
                {if (true) return wr;}
    throw new Error("Missing return statement in function");
    } finally {
      trace_return("week_range");
    }
  }

  static final public ArrayList<WeekRange> week_selector() throws ParseException {
    trace_call("week_selector");
    try {
  WeekRange wr,wr1;
  ArrayList<WeekRange> result = new ArrayList<WeekRange>();
      jj_consume_token(36);
      label_21:
      while (true) {
        jj_consume_token(WS);
        if (jj_2_78(10)) {
          ;
        } else {
          break label_21;
        }
      }
      wr = week_range();
      label_22:
      while (true) {
        if (jj_2_79(10)) {
          ;
        } else {
          break label_22;
        }
        label_23:
        while (true) {
          if (jj_2_80(10)) {
            ;
          } else {
            break label_23;
          }
          jj_consume_token(WS);
        }
        jj_consume_token(COMMA);
        label_24:
        while (true) {
          if (jj_2_81(10)) {
            ;
          } else {
            break label_24;
          }
          jj_consume_token(WS);
        }
        wr1 = week_range();
        result.add(0,wr1);
      }
    result.add(wr);
    Collections.reverse(result);
    {if (true) return result;}
    throw new Error("Missing return statement in function");
    } finally {
      trace_return("week_selector");
    }
  }

  static final public RuleModifier rule_modifier() throws ParseException {
    trace_call("rule_modifier");
    try {
        RuleModifier rm = new RuleModifier();
        Token m = null;
        String c = null;
      if (jj_2_82(10)) {
        m = jj_consume_token(MODIFIER);
          rm.modifier = m.image;
      } else {
        ;
      }
      if (jj_2_83(10)) {
        c = comment();
          rm.comment = c;
      } else {
        ;
      }
        {if (true) return rm;}
    throw new Error("Missing return statement in function");
    } finally {
      trace_return("rule_modifier");
    }
  }

  static final public Rule rule() throws ParseException {
    trace_call("rule");
    try {
        Rule r = null;
        ArrayList<WeekRange> ws = null;
        ArrayList<MonthDayRange> ms = null;
        ArrayList<Holiday> hs = null;
        ArrayList<WeekDayRange> ds = null;
        ArrayList<TimeSpan> ts = null;
        RuleModifier rm = null;
      if (jj_2_85(10)) {
        label_25:
        while (true) {
          if (jj_2_84(10)) {
            ;
          } else {
            break label_25;
          }
          jj_consume_token(WS);
        }
        ws = week_selector();
      } else {
        ;
      }
      if (jj_2_87(10)) {
        label_26:
        while (true) {
          if (jj_2_86(10)) {
            ;
          } else {
            break label_26;
          }
          jj_consume_token(WS);
        }
        hs = holiday_sequence();
      } else {
        ;
      }
      if (jj_2_92(10)) {
        if (jj_2_91(10)) {
          if (jj_2_89(10)) {
            label_27:
            while (true) {
              jj_consume_token(WS);
              if (jj_2_88(10)) {
                ;
              } else {
                break label_27;
              }
            }
          } else if (jj_2_90(10)) {
            jj_consume_token(COMMA);
          } else {
            jj_consume_token(-1);
            throw new ParseException();
          }
        } else {
          ;
        }
        ds = weekday_selector();
      } else {
        ;
      }
      if (jj_2_94(10)) {
        label_28:
        while (true) {
          if (jj_2_93(10)) {
            ;
          } else {
            break label_28;
          }
          jj_consume_token(WS);
        }
        ts = time_selector();
      } else {
        ;
      }
      label_29:
      while (true) {
        if (jj_2_95(10)) {
          ;
        } else {
          break label_29;
        }
        jj_consume_token(WS);
      }
      rm = rule_modifier();
                r = new Rule();
                r.weeks = ws;
                r.monthdays = ms;
                r.holidays = hs;
                r.days = ds;
                r.times = ts;
                r.modifier = rm;
                {if (true) return r;}
    throw new Error("Missing return statement in function");
    } finally {
      trace_return("rule");
    }
  }

  static final public ArrayList<Rule> rules() throws ParseException {
    trace_call("rules");
    try {
  ArrayList<Rule> result = new ArrayList<Rule>();
  Rule r = null;
  Rule r1 = null;
      r = rule();
      label_30:
      while (true) {
        if (jj_2_96(10)) {
          ;
        } else {
          break label_30;
        }
        label_31:
        while (true) {
          if (jj_2_97(10)) {
            ;
          } else {
            break label_31;
          }
          jj_consume_token(WS);
        }
        if (jj_2_98(10)) {
          jj_consume_token(COMMA);
        } else if (jj_2_99(10)) {
          jj_consume_token(SEMICOLON);
        } else if (jj_2_100(10)) {
          jj_consume_token(FALLBACKSEPERATOR);
        } else if (jj_2_101(10)) {
          jj_consume_token(0);
        } else {
          jj_consume_token(-1);
          throw new ParseException();
        }
        label_32:
        while (true) {
          if (jj_2_102(10)) {
            ;
          } else {
            break label_32;
          }
          jj_consume_token(WS);
        }
        r1 = rule();
        result.add(0,r1);
      }
        result.add(r);
        Collections.reverse(result);
    {if (true) return result;}
    throw new Error("Missing return statement in function");
    } finally {
      trace_return("rules");
    }
  }

  static private boolean jj_2_1(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_1(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(0, xla); }
  }

  static private boolean jj_2_2(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_2(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(1, xla); }
  }

  static private boolean jj_2_3(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_3(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(2, xla); }
  }

  static private boolean jj_2_4(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_4(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(3, xla); }
  }

  static private boolean jj_2_5(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_5(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(4, xla); }
  }

  static private boolean jj_2_6(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_6(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(5, xla); }
  }

  static private boolean jj_2_7(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_7(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(6, xla); }
  }

  static private boolean jj_2_8(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_8(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(7, xla); }
  }

  static private boolean jj_2_9(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_9(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(8, xla); }
  }

  static private boolean jj_2_10(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_10(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(9, xla); }
  }

  static private boolean jj_2_11(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_11(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(10, xla); }
  }

  static private boolean jj_2_12(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_12(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(11, xla); }
  }

  static private boolean jj_2_13(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_13(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(12, xla); }
  }

  static private boolean jj_2_14(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_14(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(13, xla); }
  }

  static private boolean jj_2_15(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_15(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(14, xla); }
  }

  static private boolean jj_2_16(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_16(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(15, xla); }
  }

  static private boolean jj_2_17(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_17(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(16, xla); }
  }

  static private boolean jj_2_18(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_18(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(17, xla); }
  }

  static private boolean jj_2_19(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_19(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(18, xla); }
  }

  static private boolean jj_2_20(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_20(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(19, xla); }
  }

  static private boolean jj_2_21(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_21(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(20, xla); }
  }

  static private boolean jj_2_22(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_22(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(21, xla); }
  }

  static private boolean jj_2_23(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_23(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(22, xla); }
  }

  static private boolean jj_2_24(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_24(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(23, xla); }
  }

  static private boolean jj_2_25(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_25(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(24, xla); }
  }

  static private boolean jj_2_26(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_26(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(25, xla); }
  }

  static private boolean jj_2_27(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_27(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(26, xla); }
  }

  static private boolean jj_2_28(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_28(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(27, xla); }
  }

  static private boolean jj_2_29(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_29(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(28, xla); }
  }

  static private boolean jj_2_30(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_30(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(29, xla); }
  }

  static private boolean jj_2_31(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_31(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(30, xla); }
  }

  static private boolean jj_2_32(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_32(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(31, xla); }
  }

  static private boolean jj_2_33(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_33(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(32, xla); }
  }

  static private boolean jj_2_34(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_34(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(33, xla); }
  }

  static private boolean jj_2_35(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_35(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(34, xla); }
  }

  static private boolean jj_2_36(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_36(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(35, xla); }
  }

  static private boolean jj_2_37(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_37(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(36, xla); }
  }

  static private boolean jj_2_38(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_38(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(37, xla); }
  }

  static private boolean jj_2_39(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_39(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(38, xla); }
  }

  static private boolean jj_2_40(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_40(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(39, xla); }
  }

  static private boolean jj_2_41(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_41(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(40, xla); }
  }

  static private boolean jj_2_42(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_42(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(41, xla); }
  }

  static private boolean jj_2_43(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_43(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(42, xla); }
  }

  static private boolean jj_2_44(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_44(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(43, xla); }
  }

  static private boolean jj_2_45(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_45(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(44, xla); }
  }

  static private boolean jj_2_46(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_46(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(45, xla); }
  }

  static private boolean jj_2_47(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_47(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(46, xla); }
  }

  static private boolean jj_2_48(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_48(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(47, xla); }
  }

  static private boolean jj_2_49(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_49(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(48, xla); }
  }

  static private boolean jj_2_50(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_50(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(49, xla); }
  }

  static private boolean jj_2_51(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_51(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(50, xla); }
  }

  static private boolean jj_2_52(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_52(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(51, xla); }
  }

  static private boolean jj_2_53(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_53(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(52, xla); }
  }

  static private boolean jj_2_54(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_54(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(53, xla); }
  }

  static private boolean jj_2_55(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_55(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(54, xla); }
  }

  static private boolean jj_2_56(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_56(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(55, xla); }
  }

  static private boolean jj_2_57(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_57(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(56, xla); }
  }

  static private boolean jj_2_58(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_58(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(57, xla); }
  }

  static private boolean jj_2_59(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_59(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(58, xla); }
  }

  static private boolean jj_2_60(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_60(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(59, xla); }
  }

  static private boolean jj_2_61(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_61(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(60, xla); }
  }

  static private boolean jj_2_62(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_62(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(61, xla); }
  }

  static private boolean jj_2_63(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_63(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(62, xla); }
  }

  static private boolean jj_2_64(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_64(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(63, xla); }
  }

  static private boolean jj_2_65(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_65(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(64, xla); }
  }

  static private boolean jj_2_66(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_66(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(65, xla); }
  }

  static private boolean jj_2_67(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_67(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(66, xla); }
  }

  static private boolean jj_2_68(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_68(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(67, xla); }
  }

  static private boolean jj_2_69(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_69(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(68, xla); }
  }

  static private boolean jj_2_70(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_70(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(69, xla); }
  }

  static private boolean jj_2_71(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_71(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(70, xla); }
  }

  static private boolean jj_2_72(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_72(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(71, xla); }
  }

  static private boolean jj_2_73(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_73(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(72, xla); }
  }

  static private boolean jj_2_74(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_74(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(73, xla); }
  }

  static private boolean jj_2_75(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_75(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(74, xla); }
  }

  static private boolean jj_2_76(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_76(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(75, xla); }
  }

  static private boolean jj_2_77(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_77(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(76, xla); }
  }

  static private boolean jj_2_78(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_78(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(77, xla); }
  }

  static private boolean jj_2_79(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_79(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(78, xla); }
  }

  static private boolean jj_2_80(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_80(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(79, xla); }
  }

  static private boolean jj_2_81(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_81(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(80, xla); }
  }

  static private boolean jj_2_82(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_82(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(81, xla); }
  }

  static private boolean jj_2_83(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_83(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(82, xla); }
  }

  static private boolean jj_2_84(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_84(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(83, xla); }
  }

  static private boolean jj_2_85(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_85(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(84, xla); }
  }

  static private boolean jj_2_86(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_86(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(85, xla); }
  }

  static private boolean jj_2_87(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_87(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(86, xla); }
  }

  static private boolean jj_2_88(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_88(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(87, xla); }
  }

  static private boolean jj_2_89(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_89(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(88, xla); }
  }

  static private boolean jj_2_90(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_90(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(89, xla); }
  }

  static private boolean jj_2_91(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_91(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(90, xla); }
  }

  static private boolean jj_2_92(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_92(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(91, xla); }
  }

  static private boolean jj_2_93(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_93(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(92, xla); }
  }

  static private boolean jj_2_94(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_94(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(93, xla); }
  }

  static private boolean jj_2_95(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_95(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(94, xla); }
  }

  static private boolean jj_2_96(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_96(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(95, xla); }
  }

  static private boolean jj_2_97(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_97(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(96, xla); }
  }

  static private boolean jj_2_98(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_98(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(97, xla); }
  }

  static private boolean jj_2_99(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_99(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(98, xla); }
  }

  static private boolean jj_2_100(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_100(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(99, xla); }
  }

  static private boolean jj_2_101(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_101(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(100, xla); }
  }

  static private boolean jj_2_102(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_102(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(101, xla); }
  }

  static private boolean jj_3R_35() {
    if (!jj_rescan) trace_call("extendedtime(LOOKING AHEAD...)");
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_2()) {
    jj_scanpos = xsp;
    if (jj_3_3()) { if (!jj_rescan) trace_return("extendedtime(LOOKAHEAD FAILED)"); return true; }
    }
    xsp = jj_scanpos;
    if (jj_3_4()) jj_scanpos = xsp;
    { if (!jj_rescan) trace_return("extendedtime(LOOKAHEAD SUCCEEDED)"); return false; }
  }

  static private boolean jj_3_35() {
    if (jj_scan_token(HYPHEN)) return true;
    if (jj_scan_token(ONE2FIVE)) return true;
    return false;
  }

  static private boolean jj_3_101() {
    if (jj_scan_token(0)) return true;
    return false;
  }

  static private boolean jj_3_31() {
    if (jj_scan_token(WS)) return true;
    return false;
  }

  static private boolean jj_3_34() {
    if (jj_scan_token(ONE2FIVE)) return true;
    return false;
  }

  static private boolean jj_3_30() {
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3_31()) { jj_scanpos = xsp; break; }
    }
    if (jj_scan_token(COMMA)) return true;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3_32()) { jj_scanpos = xsp; break; }
    }
    if (jj_3R_39()) return true;
    return false;
  }

  static private boolean jj_3R_39() {
    if (!jj_rescan) trace_call("nth(LOOKING AHEAD...)");
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_34()) jj_scanpos = xsp;
    xsp = jj_scanpos;
    if (jj_3_35()) jj_scanpos = xsp;
    { if (!jj_rescan) trace_return("nth(LOOKAHEAD SUCCEEDED)"); return false; }
  }

  static private boolean jj_3_65() {
    if (jj_scan_token(HYPHEN)) return true;
    return false;
  }

  static private boolean jj_3_67() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_65()) {
    jj_scanpos = xsp;
    if (jj_3_66()) return true;
    }
    if (jj_scan_token(NUMBER)) return true;
    return false;
  }

  static private boolean jj_3_29() {
    if (jj_scan_token(HYPHEN)) return true;
    if (jj_3R_38()) return true;
    return false;
  }

  static private boolean jj_3R_53() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_29()) jj_scanpos = xsp;
    return false;
  }

  static private boolean jj_3_1() {
    if (jj_scan_token(MINUTES)) return true;
    return false;
  }

  static private boolean jj_3_55() {
    if (jj_scan_token(WS)) return true;
    return false;
  }

  static private boolean jj_3_62() {
    if (jj_scan_token(HYPHEN)) return true;
    return false;
  }

  static private boolean jj_3R_33() {
    if (!jj_rescan) trace_call("time(LOOKING AHEAD...)");
    if (jj_scan_token(HOUR)) { if (!jj_rescan) trace_return("time(LOOKAHEAD FAILED)"); return true; }
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_1()) jj_scanpos = xsp;
    { if (!jj_rescan) trace_return("time(LOOKAHEAD SUCCEEDED)"); return false; }
  }

  static private boolean jj_3_64() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_62()) {
    jj_scanpos = xsp;
    if (jj_3_63()) return true;
    }
    if (jj_scan_token(WEEKDAY)) return true;
    return false;
  }

  static private boolean jj_3_57() {
    if (jj_scan_token(WS)) return true;
    return false;
  }

  static private boolean jj_3_100() {
    if (jj_scan_token(FALLBACKSEPERATOR)) return true;
    return false;
  }

  static private boolean jj_3_61() {
    if (jj_scan_token(VARDATE)) return true;
    return false;
  }

  static private boolean jj_3_33() {
    if (jj_scan_token(32)) return true;
    if (jj_3R_39()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3_30()) { jj_scanpos = xsp; break; }
    }
    if (jj_scan_token(33)) return true;
    return false;
  }

  static private boolean jj_3R_54() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_33()) jj_scanpos = xsp;
    return false;
  }

  static private boolean jj_3_28() {
    if (jj_scan_token(WS)) return true;
    return false;
  }

  static private boolean jj_3R_47() {
    if (!jj_rescan) trace_call("comment(LOOKING AHEAD...)");
    if (jj_scan_token(ENDQUOTE)) { if (!jj_rescan) trace_return("comment(LOOKAHEAD FAILED)"); return true; }
    { if (!jj_rescan) trace_return("comment(LOOKAHEAD SUCCEEDED)"); return false; }
  }

  static private boolean jj_3_56() {
    if (jj_scan_token(MONTH)) return true;
    Token xsp;
    if (jj_3_55()) return true;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3_55()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  static private boolean jj_3R_40() {
    if (!jj_rescan) trace_call("weekday_range(LOOKING AHEAD...)");
    if (jj_3R_38()) { if (!jj_rescan) trace_return("weekday_range(LOOKAHEAD FAILED)"); return true; }
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_53()) {
    jj_scanpos = xsp;
    if (jj_3R_54()) { if (!jj_rescan) trace_return("weekday_range(LOOKAHEAD FAILED)"); return true; }
    }
    { if (!jj_rescan) trace_return("weekday_range(LOOKAHEAD SUCCEEDED)"); return false; }
  }

  static private boolean jj_3_53() {
    if (jj_scan_token(WS)) return true;
    return false;
  }

  static private boolean jj_3_59() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_56()) jj_scanpos = xsp;
    if (jj_3R_43()) return true;
    return false;
  }

  static private boolean jj_3_60() {
    if (jj_scan_token(MONTH)) return true;
    Token xsp;
    if (jj_3_57()) return true;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3_57()) { jj_scanpos = xsp; break; }
    }
    if (jj_scan_token(WEEKDAY)) return true;
    if (jj_scan_token(32)) return true;
    xsp = jj_scanpos;
    if (jj_3_58()) jj_scanpos = xsp;
    if (jj_scan_token(ONE2FIVE)) return true;
    if (jj_scan_token(33)) return true;
    return false;
  }

  static private boolean jj_3_99() {
    if (jj_scan_token(SEMICOLON)) return true;
    return false;
  }

  static private boolean jj_3_69() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_59()) {
    jj_scanpos = xsp;
    if (jj_3_60()) {
    jj_scanpos = xsp;
    if (jj_3_61()) return true;
    }
    }
    xsp = jj_scanpos;
    if (jj_3_64()) jj_scanpos = xsp;
    xsp = jj_scanpos;
    if (jj_3_67()) jj_scanpos = xsp;
    return false;
  }

  static private boolean jj_3_68() {
    if (jj_scan_token(MONTH)) return true;
    return false;
  }

  static private boolean jj_3_27() {
    if (jj_scan_token(WS)) return true;
    return false;
  }

  static private boolean jj_3_26() {
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3_27()) { jj_scanpos = xsp; break; }
    }
    if (jj_scan_token(COMMA)) return true;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3_28()) { jj_scanpos = xsp; break; }
    }
    if (jj_3R_37()) return true;
    return false;
  }

  static private boolean jj_3_54() {
    if (jj_scan_token(YEAR)) return true;
    Token xsp;
    if (jj_3_53()) return true;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3_53()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  static private boolean jj_3R_42() {
    if (!jj_rescan) trace_call("datewithoffset(LOOKING AHEAD...)");
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_54()) jj_scanpos = xsp;
    xsp = jj_scanpos;
    if (jj_3_68()) {
    jj_scanpos = xsp;
    if (jj_3_69()) { if (!jj_rescan) trace_return("datewithoffset(LOOKAHEAD FAILED)"); return true; }
    }
    { if (!jj_rescan) trace_return("datewithoffset(LOOKAHEAD SUCCEEDED)"); return false; }
  }

  static private boolean jj_3R_38() {
    if (!jj_rescan) trace_call("weekday(LOOKING AHEAD...)");
    if (jj_scan_token(WEEKDAY)) { if (!jj_rescan) trace_return("weekday(LOOKAHEAD FAILED)"); return true; }
    { if (!jj_rescan) trace_return("weekday(LOOKAHEAD SUCCEEDED)"); return false; }
  }

  static private boolean jj_3_98() {
    if (jj_scan_token(COMMA)) return true;
    return false;
  }

  static private boolean jj_3_47() {
    if (jj_scan_token(PLUS)) return true;
    return false;
  }

  static private boolean jj_3_52() {
    if (jj_scan_token(DAYNUM)) return true;
    return false;
  }

  static private boolean jj_3_97() {
    if (jj_scan_token(WS)) return true;
    return false;
  }

  static private boolean jj_3_96() {
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3_97()) { jj_scanpos = xsp; break; }
    }
    xsp = jj_scanpos;
    if (jj_3_98()) {
    jj_scanpos = xsp;
    if (jj_3_99()) {
    jj_scanpos = xsp;
    if (jj_3_100()) {
    jj_scanpos = xsp;
    if (jj_3_101()) return true;
    }
    }
    }
    while (true) {
      xsp = jj_scanpos;
      if (jj_3_102()) { jj_scanpos = xsp; break; }
    }
    if (jj_3R_52()) return true;
    return false;
  }

  static private boolean jj_3_19() {
    if (jj_3R_36()) return true;
    return false;
  }

  static private boolean jj_3_49() {
    if (jj_scan_token(WS)) return true;
    return false;
  }

  static private boolean jj_3R_51() {
    if (!jj_rescan) trace_call("time_selector(LOOKING AHEAD...)");
    if (jj_3R_37()) { if (!jj_rescan) trace_return("time_selector(LOOKAHEAD FAILED)"); return true; }
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3_26()) { jj_scanpos = xsp; break; }
    }
    { if (!jj_rescan) trace_return("time_selector(LOOKAHEAD SUCCEEDED)"); return false; }
  }

  static private boolean jj_3_51() {
    if (jj_scan_token(HOUR)) return true;
    return false;
  }

  static private boolean jj_3R_43() {
    if (!jj_rescan) trace_call("daynum(LOOKING AHEAD...)");
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_51()) {
    jj_scanpos = xsp;
    if (jj_3_52()) { if (!jj_rescan) trace_return("daynum(LOOKAHEAD FAILED)"); return true; }
    }
    { if (!jj_rescan) trace_return("daynum(LOOKAHEAD SUCCEEDED)"); return false; }
  }

  static private boolean jj_3_11() {
    if (jj_scan_token(NUMBER)) return true;
    return false;
  }

  static private boolean jj_3_42() {
    if (jj_scan_token(35)) return true;
    return false;
  }

  static private boolean jj_3_90() {
    if (jj_scan_token(COMMA)) return true;
    return false;
  }

  static private boolean jj_3_25() {
    if (jj_scan_token(ALWAYS)) return true;
    return false;
  }

  static private boolean jj_3_16() {
    if (jj_3R_35()) return true;
    return false;
  }

  static private boolean jj_3_48() {
    if (jj_scan_token(WS)) return true;
    return false;
  }

  static private boolean jj_3_20() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_18()) {
    jj_scanpos = xsp;
    if (jj_3_19()) return true;
    }
    return false;
  }

  static private boolean jj_3_18() {
    if (jj_scan_token(PLUS)) return true;
    return false;
  }

  static private boolean jj_3_50() {
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3_48()) { jj_scanpos = xsp; break; }
    }
    if (jj_scan_token(HYPHEN)) return true;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3_49()) { jj_scanpos = xsp; break; }
    }
    if (jj_3R_42()) return true;
    return false;
  }

  static private boolean jj_3_81() {
    if (jj_scan_token(WS)) return true;
    return false;
  }

  static private boolean jj_3_88() {
    if (jj_scan_token(WS)) return true;
    return false;
  }

  static private boolean jj_3_95() {
    if (jj_scan_token(WS)) return true;
    return false;
  }

  static private boolean jj_3_93() {
    if (jj_scan_token(WS)) return true;
    return false;
  }

  static private boolean jj_3_91() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_89()) {
    jj_scanpos = xsp;
    if (jj_3_90()) return true;
    }
    return false;
  }

  static private boolean jj_3_89() {
    Token xsp;
    if (jj_3_88()) return true;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3_88()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  static private boolean jj_3_94() {
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3_93()) { jj_scanpos = xsp; break; }
    }
    if (jj_3R_51()) return true;
    return false;
  }

  static private boolean jj_3_86() {
    if (jj_scan_token(WS)) return true;
    return false;
  }

  static private boolean jj_3_17() {
    if (jj_3R_34()) return true;
    return false;
  }

  static private boolean jj_3_92() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_91()) jj_scanpos = xsp;
    if (jj_3R_50()) return true;
    return false;
  }

  static private boolean jj_3_76() {
    if (jj_3R_36()) return true;
    return false;
  }

  static private boolean jj_3_41() {
    if (jj_scan_token(WS)) return true;
    return false;
  }

  static private boolean jj_3_87() {
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3_86()) { jj_scanpos = xsp; break; }
    }
    if (jj_3R_49()) return true;
    return false;
  }

  static private boolean jj_3_84() {
    if (jj_scan_token(WS)) return true;
    return false;
  }

  static private boolean jj_3_85() {
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3_84()) { jj_scanpos = xsp; break; }
    }
    if (jj_3R_48()) return true;
    return false;
  }

  static private boolean jj_3R_52() {
    if (!jj_rescan) trace_call("rule(LOOKING AHEAD...)");
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_85()) jj_scanpos = xsp;
    xsp = jj_scanpos;
    if (jj_3_87()) jj_scanpos = xsp;
    xsp = jj_scanpos;
    if (jj_3_92()) jj_scanpos = xsp;
    xsp = jj_scanpos;
    if (jj_3_94()) jj_scanpos = xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3_95()) { jj_scanpos = xsp; break; }
    }
    if (jj_3R_55()) { if (!jj_rescan) trace_return("rule(LOOKAHEAD FAILED)"); return true; }
    { if (!jj_rescan) trace_return("rule(LOOKAHEAD SUCCEEDED)"); return false; }
  }

  static private boolean jj_3_22() {
    if (jj_scan_token(HYPHEN)) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_16()) {
    jj_scanpos = xsp;
    if (jj_3_17()) return true;
    }
    xsp = jj_scanpos;
    if (jj_3_20()) jj_scanpos = xsp;
    return false;
  }

  static private boolean jj_3_23() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_21()) {
    jj_scanpos = xsp;
    if (jj_3_22()) return true;
    }
    return false;
  }

  static private boolean jj_3_21() {
    if (jj_scan_token(PLUS)) return true;
    return false;
  }

  static private boolean jj_3_46() {
    if (jj_scan_token(WS)) return true;
    return false;
  }

  static private boolean jj_3R_44() {
    if (!jj_rescan) trace_call("monthday_range(LOOKING AHEAD...)");
    if (jj_3R_42()) { if (!jj_rescan) trace_return("monthday_range(LOOKAHEAD FAILED)"); return true; }
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_47()) jj_scanpos = xsp;
    xsp = jj_scanpos;
    if (jj_3_50()) jj_scanpos = xsp;
    { if (!jj_rescan) trace_return("monthday_range(LOOKAHEAD SUCCEEDED)"); return false; }
  }

  static private boolean jj_3_10() {
    if (jj_scan_token(EXTENDEDHOUR)) return true;
    return false;
  }

  static private boolean jj_3_15() {
    if (jj_3R_34()) return true;
    return false;
  }

  static private boolean jj_3_80() {
    if (jj_scan_token(WS)) return true;
    return false;
  }

  static private boolean jj_3_14() {
    if (jj_3R_33()) return true;
    return false;
  }

  static private boolean jj_3_79() {
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3_80()) { jj_scanpos = xsp; break; }
    }
    if (jj_scan_token(COMMA)) return true;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3_81()) { jj_scanpos = xsp; break; }
    }
    if (jj_3R_46()) return true;
    return false;
  }

  static private boolean jj_3R_37() {
    if (!jj_rescan) trace_call("timespan(LOOKING AHEAD...)");
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_24()) {
    jj_scanpos = xsp;
    if (jj_3_25()) { if (!jj_rescan) trace_return("timespan(LOOKAHEAD FAILED)"); return true; }
    }
    { if (!jj_rescan) trace_return("timespan(LOOKAHEAD SUCCEEDED)"); return false; }
  }

  static private boolean jj_3_24() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_14()) {
    jj_scanpos = xsp;
    if (jj_3_15()) return true;
    }
    xsp = jj_scanpos;
    if (jj_3_23()) jj_scanpos = xsp;
    return false;
  }

  static private boolean jj_3_6() {
    if (jj_scan_token(HYPHEN)) return true;
    return false;
  }

  static private boolean jj_3_83() {
    if (jj_3R_47()) return true;
    return false;
  }

  static private boolean jj_3_40() {
    if (jj_scan_token(PLUS)) return true;
    return false;
  }

  static private boolean jj_3_45() {
    if (jj_scan_token(WS)) return true;
    return false;
  }

  static private boolean jj_3_44() {
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3_45()) { jj_scanpos = xsp; break; }
    }
    if (jj_scan_token(COMMA)) return true;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3_46()) { jj_scanpos = xsp; break; }
    }
    if (jj_3R_41()) return true;
    return false;
  }

  static private boolean jj_3_9() {
    if (jj_scan_token(HOUR)) return true;
    return false;
  }

  static private boolean jj_3_82() {
    if (jj_scan_token(MODIFIER)) return true;
    return false;
  }

  static private boolean jj_3_12() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_9()) {
    jj_scanpos = xsp;
    if (jj_3_10()) {
    jj_scanpos = xsp;
    if (jj_3_11()) return true;
    }
    }
    return false;
  }

  static private boolean jj_3_77() {
    if (jj_scan_token(HYPHEN)) return true;
    if (jj_3R_45()) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_76()) jj_scanpos = xsp;
    return false;
  }

  static private boolean jj_3R_55() {
    if (!jj_rescan) trace_call("rule_modifier(LOOKING AHEAD...)");
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_82()) jj_scanpos = xsp;
    xsp = jj_scanpos;
    if (jj_3_83()) jj_scanpos = xsp;
    { if (!jj_rescan) trace_return("rule_modifier(LOOKAHEAD SUCCEEDED)"); return false; }
  }

  static private boolean jj_3_13() {
    if (jj_scan_token(HOUR)) return true;
    if (jj_scan_token(MINUTES)) return true;
    return false;
  }

  static private boolean jj_3_5() {
    if (jj_scan_token(PLUS)) return true;
    return false;
  }

  static private boolean jj_3_38() {
    if (jj_scan_token(WS)) return true;
    return false;
  }

  static private boolean jj_3_75() {
    if (jj_scan_token(WEEKNUM)) return true;
    return false;
  }

  static private boolean jj_3R_49() {
    if (!jj_rescan) trace_call("holiday_sequence(LOOKING AHEAD...)");
    if (jj_3R_41()) { if (!jj_rescan) trace_return("holiday_sequence(LOOKAHEAD FAILED)"); return true; }
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3_44()) { jj_scanpos = xsp; break; }
    }
    { if (!jj_rescan) trace_return("holiday_sequence(LOOKAHEAD SUCCEEDED)"); return false; }
  }

  static private boolean jj_3_39() {
    if (jj_scan_token(HYPHEN)) return true;
    return false;
  }

  static private boolean jj_3R_36() {
    if (!jj_rescan) trace_call("interval(LOOKING AHEAD...)");
    if (jj_scan_token(SLASH)) { if (!jj_rescan) trace_return("interval(LOOKAHEAD FAILED)"); return true; }
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_12()) {
    jj_scanpos = xsp;
    if (jj_3_13()) { if (!jj_rescan) trace_return("interval(LOOKAHEAD FAILED)"); return true; }
    }
    { if (!jj_rescan) trace_return("interval(LOOKAHEAD SUCCEEDED)"); return false; }
  }

  static private boolean jj_3_78() {
    if (jj_scan_token(WS)) return true;
    return false;
  }

  static private boolean jj_3_43() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_39()) {
    jj_scanpos = xsp;
    if (jj_3_40()) return true;
    }
    if (jj_scan_token(NUMBER)) return true;
    xsp = jj_scanpos;
    if (jj_3_41()) jj_scanpos = xsp;
    if (jj_scan_token(34)) return true;
    xsp = jj_scanpos;
    if (jj_3_42()) jj_scanpos = xsp;
    return false;
  }

  static private boolean jj_3_72() {
    if (jj_scan_token(WS)) return true;
    return false;
  }

  static private boolean jj_3R_48() {
    if (!jj_rescan) trace_call("week_selector(LOOKING AHEAD...)");
    if (jj_scan_token(36)) { if (!jj_rescan) trace_return("week_selector(LOOKAHEAD FAILED)"); return true; }
    Token xsp;
    if (jj_3_78()) { if (!jj_rescan) trace_return("week_selector(LOOKAHEAD FAILED)"); return true; }
    while (true) {
      xsp = jj_scanpos;
      if (jj_3_78()) { jj_scanpos = xsp; break; }
    }
    if (jj_3R_46()) { if (!jj_rescan) trace_return("week_selector(LOOKAHEAD FAILED)"); return true; }
    while (true) {
      xsp = jj_scanpos;
      if (jj_3_79()) { jj_scanpos = xsp; break; }
    }
    { if (!jj_rescan) trace_return("week_selector(LOOKAHEAD SUCCEEDED)"); return false; }
  }

  static private boolean jj_3_37() {
    if (jj_scan_token(WS)) return true;
    return false;
  }

  static private boolean jj_3_36() {
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3_37()) { jj_scanpos = xsp; break; }
    }
    if (jj_scan_token(COMMA)) return true;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3_38()) { jj_scanpos = xsp; break; }
    }
    if (jj_3R_40()) return true;
    return false;
  }

  static private boolean jj_3R_46() {
    if (!jj_rescan) trace_call("week_range(LOOKING AHEAD...)");
    if (jj_3R_45()) { if (!jj_rescan) trace_return("week_range(LOOKAHEAD FAILED)"); return true; }
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_77()) jj_scanpos = xsp;
    { if (!jj_rescan) trace_return("week_range(LOOKAHEAD SUCCEEDED)"); return false; }
  }

  static private boolean jj_3_8() {
    if (jj_scan_token(30)) return true;
    if (jj_scan_token(EVENTS)) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_5()) {
    jj_scanpos = xsp;
    if (jj_3_6()) return true;
    }
    if (jj_3R_33()) return true;
    if (jj_scan_token(31)) return true;
    return false;
  }

  static private boolean jj_3R_41() {
    if (!jj_rescan) trace_call("holiday(LOOKING AHEAD...)");
    if (jj_scan_token(HOLIDAYS)) { if (!jj_rescan) trace_return("holiday(LOOKAHEAD FAILED)"); return true; }
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_43()) jj_scanpos = xsp;
    { if (!jj_rescan) trace_return("holiday(LOOKAHEAD SUCCEEDED)"); return false; }
  }

  static private boolean jj_3_74() {
    if (jj_scan_token(EXTENDEDHOUR)) return true;
    return false;
  }

  static private boolean jj_3_3() {
    if (jj_scan_token(HOUR)) return true;
    return false;
  }

  static private boolean jj_3_71() {
    if (jj_scan_token(WS)) return true;
    return false;
  }

  static private boolean jj_3R_34() {
    if (!jj_rescan) trace_call("variabletime(LOOKING AHEAD...)");
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_7()) {
    jj_scanpos = xsp;
    if (jj_3_8()) { if (!jj_rescan) trace_return("variabletime(LOOKAHEAD FAILED)"); return true; }
    }
    { if (!jj_rescan) trace_return("variabletime(LOOKAHEAD SUCCEEDED)"); return false; }
  }

  static private boolean jj_3_7() {
    if (jj_scan_token(EVENTS)) return true;
    return false;
  }

  static private boolean jj_3_70() {
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3_71()) { jj_scanpos = xsp; break; }
    }
    if (jj_scan_token(COMMA)) return true;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3_72()) { jj_scanpos = xsp; break; }
    }
    if (jj_3R_44()) return true;
    return false;
  }

  static private boolean jj_3_73() {
    if (jj_scan_token(HOUR)) return true;
    return false;
  }

  static private boolean jj_3R_45() {
    if (!jj_rescan) trace_call("weeknum(LOOKING AHEAD...)");
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_73()) {
    jj_scanpos = xsp;
    if (jj_3_74()) {
    jj_scanpos = xsp;
    if (jj_3_75()) { if (!jj_rescan) trace_return("weeknum(LOOKAHEAD FAILED)"); return true; }
    }
    }
    { if (!jj_rescan) trace_return("weeknum(LOOKAHEAD SUCCEEDED)"); return false; }
  }

  static private boolean jj_3_32() {
    if (jj_scan_token(WS)) return true;
    return false;
  }

  static private boolean jj_3R_50() {
    if (!jj_rescan) trace_call("weekday_selector(LOOKING AHEAD...)");
    if (jj_3R_40()) { if (!jj_rescan) trace_return("weekday_selector(LOOKAHEAD FAILED)"); return true; }
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3_36()) { jj_scanpos = xsp; break; }
    }
    { if (!jj_rescan) trace_return("weekday_selector(LOOKAHEAD SUCCEEDED)"); return false; }
  }

  static private boolean jj_3_66() {
    if (jj_scan_token(PLUS)) return true;
    return false;
  }

  static private boolean jj_3_102() {
    if (jj_scan_token(WS)) return true;
    return false;
  }

  static private boolean jj_3_58() {
    if (jj_scan_token(HYPHEN)) return true;
    return false;
  }

  static private boolean jj_3_4() {
    if (jj_scan_token(MINUTES)) return true;
    return false;
  }

  static private boolean jj_3_2() {
    if (jj_scan_token(EXTENDEDHOUR)) return true;
    return false;
  }

  static private boolean jj_3_63() {
    if (jj_scan_token(PLUS)) return true;
    return false;
  }

  static private boolean jj_initialized_once = false;
  /** Generated Token Manager. */
  static public EG1TokenManager token_source;
  static SimpleCharStream jj_input_stream;
  /** Current token. */
  static public Token token;
  /** Next token. */
  static public Token jj_nt;
  static private int jj_ntk;
  static private Token jj_scanpos, jj_lastpos;
  static private int jj_la;
  static private int jj_gen;
  static final private int[] jj_la1 = new int[0];
  static private int[] jj_la1_0;
  static private int[] jj_la1_1;
  static {
      jj_la1_init_0();
      jj_la1_init_1();
   }
   private static void jj_la1_init_0() {
      jj_la1_0 = new int[] {};
   }
   private static void jj_la1_init_1() {
      jj_la1_1 = new int[] {};
   }
  static final private JJCalls[] jj_2_rtns = new JJCalls[102];
  static private boolean jj_rescan = false;
  static private int jj_gc = 0;

  /** Constructor with InputStream. */
  public EG1(java.io.InputStream stream) {
     this(stream, null);
  }
  /** Constructor with InputStream and supplied encoding */
  public EG1(java.io.InputStream stream, String encoding) {
    if (jj_initialized_once) {
      System.out.println("ERROR: Second call to constructor of static parser.  ");
      System.out.println("       You must either use ReInit() or set the JavaCC option STATIC to false");
      System.out.println("       during parser generation.");
      throw new Error();
    }
    jj_initialized_once = true;
    try { jj_input_stream = new SimpleCharStream(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
    token_source = new EG1TokenManager(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 0; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Reinitialise. */
  static public void ReInit(java.io.InputStream stream) {
     ReInit(stream, null);
  }
  /** Reinitialise. */
  static public void ReInit(java.io.InputStream stream, String encoding) {
    try { jj_input_stream.ReInit(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
    token_source.ReInit(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 0; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Constructor. */
  public EG1(java.io.Reader stream) {
    if (jj_initialized_once) {
      System.out.println("ERROR: Second call to constructor of static parser. ");
      System.out.println("       You must either use ReInit() or set the JavaCC option STATIC to false");
      System.out.println("       during parser generation.");
      throw new Error();
    }
    jj_initialized_once = true;
    jj_input_stream = new SimpleCharStream(stream, 1, 1);
    token_source = new EG1TokenManager(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 0; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Reinitialise. */
  static public void ReInit(java.io.Reader stream) {
    jj_input_stream.ReInit(stream, 1, 1);
    token_source.ReInit(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 0; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Constructor with generated Token Manager. */
  public EG1(EG1TokenManager tm) {
    if (jj_initialized_once) {
      System.out.println("ERROR: Second call to constructor of static parser. ");
      System.out.println("       You must either use ReInit() or set the JavaCC option STATIC to false");
      System.out.println("       during parser generation.");
      throw new Error();
    }
    jj_initialized_once = true;
    token_source = tm;
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 0; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Reinitialise. */
  public void ReInit(EG1TokenManager tm) {
    token_source = tm;
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 0; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  static private Token jj_consume_token(int kind) throws ParseException {
    Token oldToken;
    if ((oldToken = token).next != null) token = token.next;
    else token = token.next = token_source.getNextToken();
    jj_ntk = -1;
    if (token.kind == kind) {
      jj_gen++;
      if (++jj_gc > 100) {
        jj_gc = 0;
        for (int i = 0; i < jj_2_rtns.length; i++) {
          JJCalls c = jj_2_rtns[i];
          while (c != null) {
            if (c.gen < jj_gen) c.first = null;
            c = c.next;
          }
        }
      }
      trace_token(token, "");
      return token;
    }
    token = oldToken;
    jj_kind = kind;
    throw generateParseException();
  }

  static private final class LookaheadSuccess extends java.lang.Error { }
  static final private LookaheadSuccess jj_ls = new LookaheadSuccess();
  static private boolean jj_scan_token(int kind) {
    if (jj_scanpos == jj_lastpos) {
      jj_la--;
      if (jj_scanpos.next == null) {
        jj_lastpos = jj_scanpos = jj_scanpos.next = token_source.getNextToken();
      } else {
        jj_lastpos = jj_scanpos = jj_scanpos.next;
      }
    } else {
      jj_scanpos = jj_scanpos.next;
    }
    if (jj_rescan) {
      int i = 0; Token tok = token;
      while (tok != null && tok != jj_scanpos) { i++; tok = tok.next; }
      if (tok != null) jj_add_error_token(kind, i);
    } else {
      trace_scan(jj_scanpos, kind);
    }
    if (jj_scanpos.kind != kind) return true;
    if (jj_la == 0 && jj_scanpos == jj_lastpos) throw jj_ls;
    return false;
  }


/** Get the next Token. */
  static final public Token getNextToken() {
    if (token.next != null) token = token.next;
    else token = token.next = token_source.getNextToken();
    jj_ntk = -1;
    jj_gen++;
      trace_token(token, " (in getNextToken)");
    return token;
  }

/** Get the specific Token. */
  static final public Token getToken(int index) {
    Token t = token;
    for (int i = 0; i < index; i++) {
      if (t.next != null) t = t.next;
      else t = t.next = token_source.getNextToken();
    }
    return t;
  }

  static private int jj_ntk() {
    if ((jj_nt=token.next) == null)
      return (jj_ntk = (token.next=token_source.getNextToken()).kind);
    else
      return (jj_ntk = jj_nt.kind);
  }

  static private java.util.List<int[]> jj_expentries = new java.util.ArrayList<int[]>();
  static private int[] jj_expentry;
  static private int jj_kind = -1;
  static private int[] jj_lasttokens = new int[100];
  static private int jj_endpos;

  static private void jj_add_error_token(int kind, int pos) {
    if (pos >= 100) return;
    if (pos == jj_endpos + 1) {
      jj_lasttokens[jj_endpos++] = kind;
    } else if (jj_endpos != 0) {
      jj_expentry = new int[jj_endpos];
      for (int i = 0; i < jj_endpos; i++) {
        jj_expentry[i] = jj_lasttokens[i];
      }
      jj_entries_loop: for (java.util.Iterator<?> it = jj_expentries.iterator(); it.hasNext();) {
        int[] oldentry = (int[])(it.next());
        if (oldentry.length == jj_expentry.length) {
          for (int i = 0; i < jj_expentry.length; i++) {
            if (oldentry[i] != jj_expentry[i]) {
              continue jj_entries_loop;
            }
          }
          jj_expentries.add(jj_expentry);
          break jj_entries_loop;
        }
      }
      if (pos != 0) jj_lasttokens[(jj_endpos = pos) - 1] = kind;
    }
  }

  /** Generate ParseException. */
  static public ParseException generateParseException() {
    jj_expentries.clear();
    boolean[] la1tokens = new boolean[37];
    if (jj_kind >= 0) {
      la1tokens[jj_kind] = true;
      jj_kind = -1;
    }
    for (int i = 0; i < 0; i++) {
      if (jj_la1[i] == jj_gen) {
        for (int j = 0; j < 32; j++) {
          if ((jj_la1_0[i] & (1<<j)) != 0) {
            la1tokens[j] = true;
          }
          if ((jj_la1_1[i] & (1<<j)) != 0) {
            la1tokens[32+j] = true;
          }
        }
      }
    }
    for (int i = 0; i < 37; i++) {
      if (la1tokens[i]) {
        jj_expentry = new int[1];
        jj_expentry[0] = i;
        jj_expentries.add(jj_expentry);
      }
    }
    jj_endpos = 0;
    jj_rescan_token();
    jj_add_error_token(0, 0);
    int[][] exptokseq = new int[jj_expentries.size()][];
    for (int i = 0; i < jj_expentries.size(); i++) {
      exptokseq[i] = jj_expentries.get(i);
    }
    return new ParseException(token, exptokseq, tokenImage);
  }

  static private int trace_indent = 0;
  static private boolean trace_enabled = true;

/** Enable tracing. */
  static final public void enable_tracing() {
    trace_enabled = true;
  }

/** Disable tracing. */
  static final public void disable_tracing() {
    trace_enabled = false;
  }

  static private void trace_call(String s) {
    if (trace_enabled) {
      for (int i = 0; i < trace_indent; i++) { System.out.print(" "); }
      System.out.println("Call:   " + s);
    }
    trace_indent = trace_indent + 2;
  }

  static private void trace_return(String s) {
    trace_indent = trace_indent - 2;
    if (trace_enabled) {
      for (int i = 0; i < trace_indent; i++) { System.out.print(" "); }
      System.out.println("Return: " + s);
    }
  }

  static private void trace_token(Token t, String where) {
    if (trace_enabled) {
      for (int i = 0; i < trace_indent; i++) { System.out.print(" "); }
      System.out.print("Consumed token: <" + tokenImage[t.kind]);
      if (t.kind != 0 && !tokenImage[t.kind].equals("\"" + t.image + "\"")) {
        System.out.print(": \"" + t.image + "\"");
      }
      System.out.println(" at line " + t.beginLine + " column " + t.beginColumn + ">" + where);
    }
  }

  static private void trace_scan(Token t1, int t2) {
    if (trace_enabled) {
      for (int i = 0; i < trace_indent; i++) { System.out.print(" "); }
      System.out.print("Visited token: <" + tokenImage[t1.kind]);
      if (t1.kind != 0 && !tokenImage[t1.kind].equals("\"" + t1.image + "\"")) {
        System.out.print(": \"" + t1.image + "\"");
      }
      System.out.println(" at line " + t1.beginLine + " column " + t1.beginColumn + ">; Expected token: <" + tokenImage[t2] + ">");
    }
  }

  static private void jj_rescan_token() {
    jj_rescan = true;
    for (int i = 0; i < 102; i++) {
    try {
      JJCalls p = jj_2_rtns[i];
      do {
        if (p.gen > jj_gen) {
          jj_la = p.arg; jj_lastpos = jj_scanpos = p.first;
          switch (i) {
            case 0: jj_3_1(); break;
            case 1: jj_3_2(); break;
            case 2: jj_3_3(); break;
            case 3: jj_3_4(); break;
            case 4: jj_3_5(); break;
            case 5: jj_3_6(); break;
            case 6: jj_3_7(); break;
            case 7: jj_3_8(); break;
            case 8: jj_3_9(); break;
            case 9: jj_3_10(); break;
            case 10: jj_3_11(); break;
            case 11: jj_3_12(); break;
            case 12: jj_3_13(); break;
            case 13: jj_3_14(); break;
            case 14: jj_3_15(); break;
            case 15: jj_3_16(); break;
            case 16: jj_3_17(); break;
            case 17: jj_3_18(); break;
            case 18: jj_3_19(); break;
            case 19: jj_3_20(); break;
            case 20: jj_3_21(); break;
            case 21: jj_3_22(); break;
            case 22: jj_3_23(); break;
            case 23: jj_3_24(); break;
            case 24: jj_3_25(); break;
            case 25: jj_3_26(); break;
            case 26: jj_3_27(); break;
            case 27: jj_3_28(); break;
            case 28: jj_3_29(); break;
            case 29: jj_3_30(); break;
            case 30: jj_3_31(); break;
            case 31: jj_3_32(); break;
            case 32: jj_3_33(); break;
            case 33: jj_3_34(); break;
            case 34: jj_3_35(); break;
            case 35: jj_3_36(); break;
            case 36: jj_3_37(); break;
            case 37: jj_3_38(); break;
            case 38: jj_3_39(); break;
            case 39: jj_3_40(); break;
            case 40: jj_3_41(); break;
            case 41: jj_3_42(); break;
            case 42: jj_3_43(); break;
            case 43: jj_3_44(); break;
            case 44: jj_3_45(); break;
            case 45: jj_3_46(); break;
            case 46: jj_3_47(); break;
            case 47: jj_3_48(); break;
            case 48: jj_3_49(); break;
            case 49: jj_3_50(); break;
            case 50: jj_3_51(); break;
            case 51: jj_3_52(); break;
            case 52: jj_3_53(); break;
            case 53: jj_3_54(); break;
            case 54: jj_3_55(); break;
            case 55: jj_3_56(); break;
            case 56: jj_3_57(); break;
            case 57: jj_3_58(); break;
            case 58: jj_3_59(); break;
            case 59: jj_3_60(); break;
            case 60: jj_3_61(); break;
            case 61: jj_3_62(); break;
            case 62: jj_3_63(); break;
            case 63: jj_3_64(); break;
            case 64: jj_3_65(); break;
            case 65: jj_3_66(); break;
            case 66: jj_3_67(); break;
            case 67: jj_3_68(); break;
            case 68: jj_3_69(); break;
            case 69: jj_3_70(); break;
            case 70: jj_3_71(); break;
            case 71: jj_3_72(); break;
            case 72: jj_3_73(); break;
            case 73: jj_3_74(); break;
            case 74: jj_3_75(); break;
            case 75: jj_3_76(); break;
            case 76: jj_3_77(); break;
            case 77: jj_3_78(); break;
            case 78: jj_3_79(); break;
            case 79: jj_3_80(); break;
            case 80: jj_3_81(); break;
            case 81: jj_3_82(); break;
            case 82: jj_3_83(); break;
            case 83: jj_3_84(); break;
            case 84: jj_3_85(); break;
            case 85: jj_3_86(); break;
            case 86: jj_3_87(); break;
            case 87: jj_3_88(); break;
            case 88: jj_3_89(); break;
            case 89: jj_3_90(); break;
            case 90: jj_3_91(); break;
            case 91: jj_3_92(); break;
            case 92: jj_3_93(); break;
            case 93: jj_3_94(); break;
            case 94: jj_3_95(); break;
            case 95: jj_3_96(); break;
            case 96: jj_3_97(); break;
            case 97: jj_3_98(); break;
            case 98: jj_3_99(); break;
            case 99: jj_3_100(); break;
            case 100: jj_3_101(); break;
            case 101: jj_3_102(); break;
          }
        }
        p = p.next;
      } while (p != null);
      } catch(LookaheadSuccess ls) { }
    }
    jj_rescan = false;
  }

  static private void jj_save(int index, int xla) {
    JJCalls p = jj_2_rtns[index];
    while (p.gen > jj_gen) {
      if (p.next == null) { p = p.next = new JJCalls(); break; }
      p = p.next;
    }
    p.gen = jj_gen + xla - jj_la; p.first = token; p.arg = xla;
  }

  static final class JJCalls {
    int gen;
    Token first;
    int arg;
    JJCalls next;
  }

}
